diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..6929f46
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,13 @@
+BotConfig.json
+GuildConfigs.json
+UAccounts.json
+*.dll
+*.log
+*.user
+*.vspscc
+.idea/
+SIVA/bin/
+SIVA/obj/
+SIVA/Properties/
+.vs/
+SIVA.vssscc
diff --git a/Images/SIVA.png b/Images/SIVA.png
deleted file mode 100644
index e7f1e8c..0000000
Binary files a/Images/SIVA.png and /dev/null differ
diff --git a/Images/bg.jpg b/Images/bg.jpg
deleted file mode 100644
index 38bdf04..0000000
Binary files a/Images/bg.jpg and /dev/null differ
diff --git a/Images/overlay.png b/Images/overlay.png
deleted file mode 100644
index 127bb2b..0000000
Binary files a/Images/overlay.png and /dev/null differ
diff --git a/Images/pic01.jpg b/Images/pic01.jpg
deleted file mode 100644
index b8c5e1e..0000000
Binary files a/Images/pic01.jpg and /dev/null differ
diff --git a/Images/pic02.jpg b/Images/pic02.jpg
deleted file mode 100644
index fe3be4f..0000000
Binary files a/Images/pic02.jpg and /dev/null differ
diff --git a/Images/pic03.jpg b/Images/pic03.jpg
deleted file mode 100644
index 282e4f5..0000000
Binary files a/Images/pic03.jpg and /dev/null differ
diff --git a/Images/pic04.jpg b/Images/pic04.jpg
deleted file mode 100644
index b0206cb..0000000
Binary files a/Images/pic04.jpg and /dev/null differ
diff --git a/Images/pic05.jpg b/Images/pic05.jpg
deleted file mode 100644
index 3731316..0000000
Binary files a/Images/pic05.jpg and /dev/null differ
diff --git a/Images/pic06.jpg b/Images/pic06.jpg
deleted file mode 100644
index a9762ce..0000000
Binary files a/Images/pic06.jpg and /dev/null differ
diff --git a/Images/pic07.jpg b/Images/pic07.jpg
deleted file mode 100644
index 57d9304..0000000
Binary files a/Images/pic07.jpg and /dev/null differ
diff --git a/Images/pic08.jpg b/Images/pic08.jpg
deleted file mode 100644
index e0f281d..0000000
Binary files a/Images/pic08.jpg and /dev/null differ
diff --git a/Images/pic09.jpg b/Images/pic09.jpg
deleted file mode 100644
index cfdb688..0000000
Binary files a/Images/pic09.jpg and /dev/null differ
diff --git a/SIVA.sln b/SIVA.sln
new file mode 100644
index 0000000..529c390
--- /dev/null
+++ b/SIVA.sln
@@ -0,0 +1,40 @@
+﻿
+Microsoft Visual Studio Solution File, Format Version 12.00
+# Visual Studio 15
+VisualStudioVersion = 15.0.27130.2036
+MinimumVisualStudioVersion = 10.0.40219.1
+Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "SIVA", "SIVA\SIVA.csproj", "{206271A3-422E-4D56-963D-B92682131868}"
+EndProject
+Global
+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+		Debug|Any CPU = Debug|Any CPU
+		Debug|x64 = Debug|x64
+		Release|Any CPU = Release|Any CPU
+		Release|x64 = Release|x64
+	EndGlobalSection
+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{206271A3-422E-4D56-963D-B92682131868}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{206271A3-422E-4D56-963D-B92682131868}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{206271A3-422E-4D56-963D-B92682131868}.Debug|x64.ActiveCfg = Debug|Any CPU
+		{206271A3-422E-4D56-963D-B92682131868}.Debug|x64.Build.0 = Debug|Any CPU
+		{206271A3-422E-4D56-963D-B92682131868}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{206271A3-422E-4D56-963D-B92682131868}.Release|Any CPU.Build.0 = Release|Any CPU
+		{206271A3-422E-4D56-963D-B92682131868}.Release|x64.ActiveCfg = Release|Any CPU
+		{206271A3-422E-4D56-963D-B92682131868}.Release|x64.Build.0 = Release|Any CPU
+	EndGlobalSection
+	GlobalSection(SolutionProperties) = preSolution
+		HideSolutionNode = FALSE
+	EndGlobalSection
+	GlobalSection(ExtensibilityGlobals) = postSolution
+		SolutionGuid = {336AC868-D3E8-47D9-AF3E-AC826529809D}
+	EndGlobalSection
+	GlobalSection(TeamFoundationVersionControl) = preSolution
+		SccNumberOfProjects = 2
+		SccEnterpriseProvider = {4CA58AB2-18FA-4F8D-95D4-32DDF27D184C}
+		SccTeamFoundationServer = https://greem.visualstudio.com/
+		SccLocalPath0 = .
+		SccProjectUniqueName1 = SIVA\\SIVA.csproj
+		SccProjectName1 = SIVA
+		SccLocalPath1 = SIVA
+	EndGlobalSection
+EndGlobal
diff --git a/SIVA/Core/Bot/Blacklist.cs b/SIVA/Core/Bot/Blacklist.cs
new file mode 100644
index 0000000..eb2cc21
--- /dev/null
+++ b/SIVA/Core/Bot/Blacklist.cs
@@ -0,0 +1,28 @@
+﻿using System.Threading.Tasks;
+using Discord.WebSocket;
+using Discord.Commands;
+using SIVA.Core.JsonFiles;
+
+namespace SIVA.Core.Bot
+{
+    internal class Blacklist
+    {
+        protected static DiscordSocketClient _client = Program._client;
+
+        public static async Task CheckMessageForBlacklistedTerms(SocketMessage s)
+        {
+            var msg = s as SocketUserMessage;
+            var context = new SocketCommandContext(_client, msg);
+            var config = GuildConfig.GetGuildConfig(context.Guild.Id);
+            if (msg == null || context.User.IsBot || config == null) return;
+            foreach (var word in config.Blacklist)
+            {
+                if (msg.Content.Contains(word))
+                {
+                    await msg.DeleteAsync();
+                    break;
+                }
+            }
+        }
+    }
+}
diff --git a/SIVA/Core/Bot/Config.cs b/SIVA/Core/Bot/Config.cs
new file mode 100644
index 0000000..0c527b2
--- /dev/null
+++ b/SIVA/Core/Bot/Config.cs
@@ -0,0 +1,68 @@
+﻿using System.IO;
+using Newtonsoft.Json;
+
+namespace SIVA.Core.Bot
+{
+    public class Config
+    {
+        private const string configFile = "Resources/BotConfig.json";
+        public static BotConfig bot;
+
+        static Config()
+        {
+            if (!Directory.Exists("Resources"))
+                Directory.CreateDirectory("Resources");
+
+            if (!File.Exists(configFile))
+            {
+                bot = new BotConfig();
+                string json = JsonConvert.SerializeObject(bot, Formatting.Indented);
+                File.WriteAllText(configFile, json);
+            }
+            else
+            {
+                string json = File.ReadAllText(configFile);
+                bot = JsonConvert.DeserializeObject<BotConfig>(json);
+            }
+        }
+
+        public static BotConfig GetOrCreateConfig()
+        {
+            if (bot.Token == "")
+            {
+                string jsonFile = JsonConvert.SerializeObject(bot, Formatting.Indented);
+                bot = JsonConvert.DeserializeObject<BotConfig>(jsonFile);
+                File.WriteAllText(configFile, jsonFile);
+                return bot;
+            }
+            else
+            {
+                return bot;
+            }
+        }
+
+        public static void SaveConfig()
+        {
+            string json = JsonConvert.SerializeObject(bot, Formatting.Indented);
+            File.WriteAllText(configFile, json);
+        }
+
+        public struct BotConfig
+        {
+            public string Token;
+            public string Prefix;
+            public bool Debug;
+            public string BotGameToSet;
+            public string TwitchStreamer;
+            public ulong BotOwner;
+            public uint DefaultEmbedColour;
+            public bool IsSelfbot;
+            public string CurrencySymbol;
+            public ulong FeedbackChannelId;
+            public uint ErrorEmbedColour;
+            public string LogSeverity;
+            public ulong[] Blacklist;
+        }
+    }
+}
+
diff --git a/SIVA/Core/Bot/EventHandler.cs b/SIVA/Core/Bot/EventHandler.cs
new file mode 100644
index 0000000..842c507
--- /dev/null
+++ b/SIVA/Core/Bot/EventHandler.cs
@@ -0,0 +1,161 @@
+﻿using System;
+using Discord.WebSocket;
+using Discord.Commands;
+using System.Threading.Tasks;
+using System.Reflection;
+using System.Linq;
+using Discord;
+using SIVA.Core.JsonFiles;
+using System.IO;
+using System.Collections.Generic;
+
+namespace SIVA.Core.Bot
+{
+    internal class EventHandler
+    {
+        DiscordSocketClient _client = Program._client;
+        internal CommandService _service;
+
+        public async Task InitializeAsync(DiscordSocketClient client)
+        {
+            _client = client;
+            _service = new CommandService();
+            await _service.AddModulesAsync(Assembly.GetEntryAssembly());
+            _service.Log += EventUtils.Log;
+            _client.MessageReceived += HandleCommandAsync;
+            _client.ReactionAdded += Support.DeleteSupportChannel;
+            _client.UserJoined += EventUtils.Welcome;
+            _client.UserJoined += EventUtils.Autorole;
+            _client.JoinedGuild += EventUtils.GuildUtils;
+            _client.UserLeft += EventUtils.Goodbye;
+            _client.UserBanned += Logging.HandleBans;
+            _client.ChannelCreated += Logging.HandleChannelCreate;
+            _client.ChannelDestroyed += Logging.HandleChannelDelete;
+            _client.GuildUpdated += Logging.HandleServerUpdate;
+            _client.MessageDeleted += Logging.HandleMessageDelete;
+            _client.MessageUpdated += Logging.HandleMessageUpdate;
+            _client.UserUpdated += Logging.HandleUserUpdate;
+            _client.RoleCreated += Logging.HandleRoleCreation;
+            _client.RoleUpdated += Logging.HandleRoleUpdate;
+            _client.RoleDeleted += Logging.HandleRoleDelete;
+        }
+    
+        private async Task HandleCommandAsync(SocketMessage s)
+        {
+            var msg = s as SocketUserMessage;
+            var context = new SocketCommandContext(_client, msg);
+            await EventUtils.AssholeChecks(s);
+            await EventUtils.HandleMessages(s);
+            await Blacklist.CheckMessageForBlacklistedTerms(s);
+            await Support.SupportSystem(s);
+            if (msg == null)
+            {
+                Console.WriteLine($"{s} not cared for as it's {msg} (for whatever reason)");
+                return;
+            }
+
+
+            if (context.User.IsBot) return;
+
+            var config = GuildConfig.GetGuildConfig(context.Guild.Id) ?? GuildConfig.CreateGuildConfig(context.Guild.Id);
+            var prefix = config.CommandPrefix ?? Config.bot.Prefix;
+
+            if (config.EmbedColour1 == 0 && config.EmbedColour2 == 0 && config.EmbedColour3 == 0)
+            {
+                config.EmbedColour1 = 112;
+                config.EmbedColour2 = 0;
+                config.EmbedColour3 = 251;
+                GuildConfig.SaveGuildConfig();
+            }
+
+            var argPos = 0;
+
+            foreach (KeyValuePair<string, string> command in config.CustomCommands)
+            {
+                if (msg.HasStringPrefix($"{config.CommandPrefix}{command.Key}", ref argPos))
+                {
+                    await context.Channel.SendMessageAsync(command.Value);
+                    break;
+                }
+            }
+
+            if (msg.HasStringPrefix(prefix, ref argPos) || msg.HasMentionPrefix(_client.CurrentUser, ref argPos))
+            {
+                var result = await _service.ExecuteAsync(context, argPos); 
+                //Console.WriteLine($"Command -{msg.Content}- executed");
+                if (result.IsSuccess == false && result.ErrorReason != "Unknown command.")
+                {
+                    string reason;
+                    switch (result.ErrorReason)
+                    {
+                        case "The server responded with error 403: Forbidden":
+                            reason = "I'm not allowed to do that. Either I don't have permission or the requested user is higher than me in the role heirarchy.";
+                            break;
+                        case "Sequence contains no elements":
+                            try { reason = $"{msg.MentionedUsers.FirstOrDefault().Mention} doesn't have any."; } catch (NullReferenceException) { reason = "List has no elements."; }
+                            break;
+                        case "Failed to parse Boolean":
+                            reason = "You can only input `true` or `false` for this command.";
+                            break;
+                        default:
+                            reason = result.ErrorReason;
+                            break;
+                    }
+
+                    EmbedBuilder embed = new EmbedBuilder();
+
+                    if (msg.HasMentionPrefix(_client.CurrentUser, ref argPos))
+                    {
+                        var nm = msg.Content.Replace($"<@{_client.CurrentUser.Id}> ", config.CommandPrefix);
+                        embed.AddField("Error in command:", nm);
+                        embed.AddField("Error reason:", reason);
+                        embed.AddField("Weird error?", "[Report it in the SIVA-dev server](https://discord.gg/prR9Yjq)");
+                        embed.WithAuthor(context.User);
+                        embed.WithColor(Config.bot.ErrorEmbedColour);
+                        await context.Channel.SendMessageAsync("", false, embed);
+                    }
+                    else
+                    {
+                        var nm = msg.Content;
+                        embed.AddField("Error in command:", nm);
+                        embed.AddField("Error reason:", reason);
+                        embed.AddField("Weird error?", "[Report it in the SIVA-dev server](https://discord.gg/prR9Yjq)");
+                        embed.WithAuthor(context.User);
+                        embed.WithColor(Config.bot.ErrorEmbedColour);
+                        await context.Channel.SendMessageAsync("", false, embed);
+                    }
+                }
+                if (result.ErrorReason == "Unknown command.") return;
+
+                Console.WriteLine($"\\|  -Command from user: {context.User.Username}#{context.User.Discriminator}");
+                Console.WriteLine($"\\|     -Command Issued: {msg.Content}");
+                Console.WriteLine($"\\|           -In Guild: {context.Guild.Name}");
+                Console.WriteLine($"\\|         -In Channel: #{context.Channel.Name}");
+                Console.WriteLine($"\\|        -Time Issued: {DateTime.Now}");
+                Console.WriteLine(result.IsSuccess
+                    ? $"\\|           -Executed: {result.IsSuccess}"
+                    : $"\\|           -Executed: {result.IsSuccess} | Reason: {result.ErrorReason}");
+                Console.WriteLine("-------------------------------------------------");
+                try 
+                {
+                    File.AppendAllText("Commands.log", $"\\|  -Command from user: {context.User.Username}#{context.User.Discriminator} ({context.User.Id})\n");
+                    File.AppendAllText("Commands.log", $"\\|     -Command Issued: {msg.Content} ({msg.Id})\n");
+                    File.AppendAllText("Commands.log", $"\\|           -In Guild: {context.Guild.Name} ({context.Guild.Id})\n");
+                    File.AppendAllText("Commands.log", $"\\|         -In Channel: #{context.Channel.Name} ({context.Channel.Id})\n");
+                    File.AppendAllText("Commands.log", $"\\|        -Time Issued: {DateTime.Now}\n");
+                    File.AppendAllText("Commands.log", result.IsSuccess
+                        ? $"\\|           -Executed: {result.IsSuccess}\n"
+                        : $"\\|           -Executed: {result.IsSuccess} | Reason: {result.ErrorReason}\n");
+                    File.AppendAllText("Commands.log", "-------------------------------------------------\n");
+                }
+                catch (FileNotFoundException) 
+                {
+                    Console.WriteLine("The Commands.log file wasn't found, creating it now.");
+                    File.WriteAllText("Commands.log", "");
+                }
+            }
+        }
+
+
+    }
+}
diff --git a/SIVA/Core/Bot/EventUtils.cs b/SIVA/Core/Bot/EventUtils.cs
new file mode 100644
index 0000000..4944489
--- /dev/null
+++ b/SIVA/Core/Bot/EventUtils.cs
@@ -0,0 +1,243 @@
+﻿using Discord;
+using Discord.WebSocket;
+using System.Linq;
+using SIVA.Core.JsonFiles;
+using System;
+using System.Threading;
+using System.Threading.Tasks;
+using Discord.Commands;
+using System.IO;
+
+namespace SIVA.Core.Bot
+{
+    internal class EventUtils
+    {
+        private static DiscordSocketClient _client = Program._client;
+
+        public static async Task Autorole(SocketGuildUser user)
+        {
+            var config = GuildConfig.GetGuildConfig(user.Guild.Id);
+            if (config.Autorole != null || config.Autorole != "")
+            {
+                var targetRole = user.Guild.Roles.FirstOrDefault(r => r.Name == config.Autorole);
+                await user.AddRoleAsync(targetRole);
+            }
+        }
+
+        internal static async Task HandleMessages(SocketMessage s)
+        {
+            var msg = s as SocketUserMessage;
+            var context = new SocketCommandContext(_client, msg);
+            if (msg == null) { Console.WriteLine($"{s} not cared for as it's null (for whatever reason)"); return; }
+            //Console.WriteLine($"Var msg: {msg}");
+            //Console.WriteLine($"Var s: {s}");
+            //Console.WriteLine($"Var context: {context}");
+
+            if (context.Guild == null)
+            {
+                var user = await context.User.GetOrCreateDMChannelAsync();
+                await user.SendMessageAsync("Commands are not available in DMs.");
+            }
+
+            var config = GuildConfig.GetGuildConfig(context.Guild.Id) ?? GuildConfig.CreateGuildConfig(context.Guild.Id);
+            config.GuildOwnerId = context.Guild.Owner.Id;
+            GuildConfig.SaveGuildConfig();
+
+            if (config.Leveling)
+            {
+                await Leveling.UserSentMessage((SocketGuildUser)context.User, (SocketTextChannel)context.Channel);
+            }
+
+            if (context.Guild.Id == 385902350432206849)
+            {
+                if (msg.Content.Contains("🎷") || msg.Content.Contains("🎺"))
+                {
+                    if (msg.Author.Id == 360493978371751937)
+                    {
+                        await msg.DeleteAsync();
+                        var msgObj = await context.Channel.SendMessageAsync(context.User.Mention + " no");
+                        Thread.Sleep(5000);
+                        await msgObj.DeleteAsync();
+                    }
+                }
+            }
+        }
+
+        public static async Task Goodbye(SocketGuildUser user)
+        {
+            var config = GuildConfig.GetGuildConfig(user.Guild.Id);
+
+            if (config.WelcomeChannel != 0)
+            {
+                var a = config.LeavingMessage.Replace("{UserMention}", user.Mention);
+                a = a.Replace("{ServerName}", user.Guild.Name);
+                a = a.Replace("{UserName}", user.Username);
+                a = a.Replace("{OwnerMention}", user.Guild.Owner.Mention);
+                a = a.Replace("{UserTag}", user.DiscriminatorValue.ToString());
+
+                var channel = user.Guild.GetTextChannel(config.WelcomeChannel);
+                var embed = new EmbedBuilder();
+                embed.WithDescription(a);
+                embed.WithColor(new Color(config.WelcomeColour1, config.WelcomeColour2, config.WelcomeColour3));
+                embed.WithFooter($"Guild Owner: {user.Guild.Owner.Username}#{user.Guild.Owner.Discriminator}");
+                embed.WithThumbnailUrl(user.Guild.IconUrl);
+                await channel.SendMessageAsync("", false, embed);
+
+            }
+        }
+
+        public static async Task Welcome(SocketGuildUser user)
+        {
+            var config = GuildConfig.GetGuildConfig(user.Guild.Id);
+
+            if (config.WelcomeChannel != 0)
+            {
+                var a = config.WelcomeMessage.Replace("{UserMention}", user.Mention);
+                a = a.Replace("{ServerName}", user.Guild.Name);
+                a = a.Replace("{UserName}", user.Username);
+                a = a.Replace("{OwnerMention}", user.Guild.Owner.Mention);
+                a = a.Replace("{UserTag}", user.DiscriminatorValue.ToString());
+
+                var channel = user.Guild.GetTextChannel(config.WelcomeChannel);
+                var embed = new EmbedBuilder();
+                embed.WithDescription(a);
+                embed.WithColor(new Color(config.WelcomeColour1, config.WelcomeColour2, config.WelcomeColour3));
+                embed.WithThumbnailUrl(user.Guild.IconUrl);
+                await channel.SendMessageAsync("", false, embed);
+            }
+
+            if (user.Guild.Id == 419612620090245140)
+            {
+                await user.ModifyAsync(x => 
+                {
+                    x.Nickname = $"{user.Username}.cs";
+                });
+            }
+        }
+
+        public static async Task GuildUtils(SocketGuild s)
+        {
+
+            var config = GuildConfig.GetGuildConfig(s.Id) ??
+                         GuildConfig.CreateGuildConfig(s.Id);
+
+            if (Config.bot.Blacklist.Contains(s.Owner.Id))
+            {
+                await s.LeaveAsync();
+                return;
+            }
+
+            int Bots = 0;
+            int Users = 0;
+            foreach (SocketGuildUser user in s.Users)
+            {
+                if (user.IsBot)
+                {
+                    Bots += 1;
+                }
+                else
+                {
+                    Users += 1;
+                }
+            }
+
+            if (Bots > Users)
+            {
+                var greemDm = await _client.GetUser(Config.bot.BotOwner).GetOrCreateDMChannelAsync();
+                await greemDm.SendMessageAsync("", false, new EmbedBuilder().WithDescription($"Server {s.Name} is potentially harmful. They have {Bots} bots and {Users} users. Consider making the bot leave.").WithColor(Config.bot.DefaultEmbedColour));
+            }
+
+            var dmChannel = await s.Owner.GetOrCreateDMChannelAsync();
+            var embed = new EmbedBuilder();
+            embed.WithTitle($"Thanks for adding me to your server, {s.Owner.Username}!");
+            embed.WithDescription("For quick information, visit the wiki: https://github.com/greemdotcs/greemdotcs.github.io/wiki \nNeed quick help? Visit the SIVA-dev server and create a support ticket: https://discord.gg/ubXaT6u \nTo get started, use the command `$h`. Follow that with a module to get a list of commands!");
+            embed.WithThumbnailUrl(s.IconUrl);
+            embed.WithFooter("Still need help? Visit the SIVA-dev server linked above.");
+            embed.WithColor(Config.bot.DefaultEmbedColour);
+
+            await dmChannel.SendMessageAsync("", false, embed);
+
+            config.GuildOwnerId = s.Owner.Id;
+            GuildConfig.SaveGuildConfig();
+
+        }
+
+        public static async Task AssholeChecks(SocketMessage s)
+        {
+
+            var msg = s as SocketUserMessage;
+            var context = new SocketCommandContext(_client, msg);
+            if (context.User.IsBot) return;
+            if (msg == null) return;
+
+            var config = GuildConfig.GetGuildConfig(context.Guild.Id);
+
+            try //attempt something
+            {
+                if (config.Antilink == false)
+                {
+                    //if antilink is turned off then do nothing.
+                }
+                else //if it isnt then do the following
+                {
+                    if (msg.Author.Id == config.GuildOwnerId) //if the message is from the guild owner
+                    {
+                        //don't do anything
+                    }
+                    else //if the message isnt from the guild owner, do the following
+                    {
+                        if ((msg.Content.Contains("https://discord.gg") || msg.Content.Contains("https://discord.io")) && !config.AntilinkIgnoredChannels.Contains(context.Channel.Id)) //if the message contains https://discord.gg or io (it's an invite link), then delete it
+                        {
+                            await msg.DeleteAsync();
+                            var embed = new EmbedBuilder();
+                            embed.WithDescription($"{context.User.Mention}, no invite links.");
+                            embed.WithColor(Config.bot.DefaultEmbedColour);
+                            var mssg = await context.Channel.SendMessageAsync("", false, embed);
+                            Thread.Sleep(10000);
+                            await mssg.DeleteAsync();
+                        }
+                    }
+                }
+            }
+            catch (NullReferenceException) // if the config variable returns an invalid value then create the guild config
+            {
+                GuildConfig.CreateGuildConfig(context.Guild.Id);
+            }
+
+            if (config.MassPengChecks)
+            {
+                if (msg.Content.Contains("@everyone") || msg.Content.Contains("@here"))
+                {
+                    if (msg.Author != context.Guild.Owner)
+                    {
+                        await msg.DeleteAsync();
+                        var msgg = await context.Channel.SendMessageAsync($"{msg.Author.Mention}, try not to mass ping.");
+                        Thread.Sleep(4000);
+                        await msgg.DeleteAsync();
+                    }
+                }
+            }
+        }
+
+        internal static async Task Log(LogMessage msg)
+        {
+            if (!Config.bot.Debug) return;
+            if (msg.Message.Contains("blocking the gateway task")) return;
+            Console.WriteLine($"[{msg.Severity}]: ({msg.Source}): {msg.Message}");
+            var msg2 = $"[{msg.Severity}]: ({msg.Source}): {msg.Message}";
+            if (!msg2.Contains("(Rest)"))
+            {
+                var channel = await Program._client.GetGuild(405806471578648588).GetTextChannel(431928769465548800).SendMessageAsync(msg2);
+            }
+
+            try
+            {
+                File.AppendAllText("Debug.log", $"[{msg.Severity}]: ({msg.Source}): {msg.Message}\n");
+            }
+            catch (FileNotFoundException)
+            {
+                File.WriteAllText("Debug.log", $"[{msg.Severity}]: ({msg.Source}): {msg.Message}\n");
+            }
+        }
+    }
+}
diff --git a/SIVA/Core/Bot/Helpers.cs b/SIVA/Core/Bot/Helpers.cs
new file mode 100644
index 0000000..64e94cf
--- /dev/null
+++ b/SIVA/Core/Bot/Helpers.cs
@@ -0,0 +1,33 @@
+﻿using System.Threading.Tasks;
+using Discord;
+using Discord.Commands;
+using SIVA.Core.JsonFiles;
+
+namespace SIVA.Core.Bot 
+{
+    class Helpers 
+    {
+        public static EmbedBuilder CreateEmbed(SocketCommandContext ctx, string desc)
+        {
+            var config = GuildConfig.GetOrCreateConfig(ctx.Guild.Id);
+            var embed = new EmbedBuilder()
+                .WithDescription(desc)
+                .WithColor(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3)
+                .WithFooter(Utilities.GetFormattedLocaleMsg("CommandFooter", ctx.User.Username));
+            return embed;
+        }
+
+        public static async Task SendMessage(SocketCommandContext ctx, EmbedBuilder embed = null, string msg = "")
+        {
+            if (embed == null)
+            {
+                await ctx.Channel.SendMessageAsync(msg);
+            }
+            else
+            {
+                await ctx.Channel.SendMessageAsync(msg, false, embed);
+            }
+            return;
+        }
+    }
+}
diff --git a/SIVA/Core/Bot/InteractiveSetup.cs b/SIVA/Core/Bot/InteractiveSetup.cs
new file mode 100644
index 0000000..22f13f3
--- /dev/null
+++ b/SIVA/Core/Bot/InteractiveSetup.cs
@@ -0,0 +1,37 @@
+﻿using System;
+using System.Threading;
+
+namespace SIVA.Core.Bot
+{
+    public class InteractiveSetup
+    {
+        internal static void Setup()
+        {
+            Console.WriteLine("Hey there! It appears you've not specified a token, so I'm here to help you set that up.");
+            Thread.Sleep(1000);
+            Console.WriteLine("Please, enter your bot's token after this line.");
+            Console.Write("Enter here: ");
+            string token = Console.ReadLine(); Config.bot.Token = token;
+            Console.WriteLine("Awesome! Just a few more things to setup and your bot will be up and running!");
+            Console.WriteLine("Please enter the prefix you'd like for your commands. This is so you can run things like `{prefix}help`");
+            Console.Write("Enter here: ");
+            string commandPrefix = Console.ReadLine(); Config.bot.Prefix = commandPrefix;
+            Console.WriteLine("What do you want the bot to set its game as when it logs into Discord? Leave blank to disable.");
+            Console.Write("Enter here: ");
+            string botGameToSet = Console.ReadLine(); Config.bot.BotGameToSet = botGameToSet;
+            Console.WriteLine("What Twitch streamer to you want to link to when people click the \"Watch\" button on the bot's profile.");
+            Console.Write("Enter here: ");
+            string twitchStreamer = Console.ReadLine(); Config.bot.TwitchStreamer = twitchStreamer;
+            Console.WriteLine("What symbol do you want set as the currency? So for example it could be 8 :Thonking: if you want thonking as your currency.");
+            Console.Write("Enter here: ");
+            string currencySymbol = Console.ReadLine(); Config.bot.CurrencySymbol = currencySymbol;
+            Console.WriteLine("The setup has been complete! If you want to further edit your config, head over to Resources/BotConfig.json and open it with Visual Studio Code or something similar.");
+            Config.bot.Debug = true;
+            Config.bot.DefaultEmbedColour = 0x7000FB;
+            Config.bot.ErrorEmbedColour = 0xFF0000;
+            Config.bot.LogSeverity = "Verbose";
+
+            Config.SaveConfig();
+        }
+    }
+}
diff --git a/SIVA/Core/Bot/Leveling.cs b/SIVA/Core/Bot/Leveling.cs
new file mode 100644
index 0000000..e5e9567
--- /dev/null
+++ b/SIVA/Core/Bot/Leveling.cs
@@ -0,0 +1,36 @@
+﻿using Discord;
+using System.Threading;
+using Discord.WebSocket;
+using System.Threading.Tasks;
+using SIVA.Core.JsonFiles;
+
+namespace SIVA.Core.Bot
+{
+    internal static class Leveling
+    {
+        internal static async Task UserSentMessage(SocketGuildUser user, SocketTextChannel channel)
+        {
+
+            var userAccount = UserAccounts.GetAccount(user);
+            uint oldLevel = userAccount.LevelNumber;
+            userAccount.Xp += 5;
+            userAccount.Money += 1;
+            UserAccounts.SaveAccounts();
+            uint newLevel = userAccount.LevelNumber;
+
+            if (oldLevel != newLevel)
+            {
+                var embed = new EmbedBuilder();
+                embed.WithDescription(Bot.Utilities.GetFormattedLocaleMsg("LeveledUpMessage", user.Username, newLevel));
+                embed.WithColor(Bot.Config.bot.DefaultEmbedColour);
+                embed.WithTitle("Level up!");
+                embed.WithDescription($"Good job **{user.Mention}**! You leveled up to level **{newLevel}**!");
+
+                var lvlUpMsg = await channel.SendMessageAsync("", false, embed);
+                Thread.Sleep(5000);
+                await lvlUpMsg.DeleteAsync();
+
+            }
+        }
+    }
+}
diff --git a/SIVA/Core/Bot/Logging.cs b/SIVA/Core/Bot/Logging.cs
new file mode 100644
index 0000000..fae4fdd
--- /dev/null
+++ b/SIVA/Core/Bot/Logging.cs
@@ -0,0 +1,201 @@
+﻿using System.Threading.Tasks;
+using System;
+using System.Text;
+using Discord.WebSocket;
+using SIVA.Core.JsonFiles;
+using Discord;
+using Discord.Commands;
+
+namespace SIVA.Core.Bot
+{
+    public static class Logging
+    {
+        public static async Task HandleBans(SocketUser user, SocketGuild server)
+        {
+            var config = GuildConfig.GetGuildConfig(server.Id);
+            var loggingChannel = server.GetTextChannel(config.ServerLoggingChannel);
+            var embed = new EmbedBuilder()
+                .AddField("User", $"{user.Username}#{user.Discriminator}")
+                .WithTitle("User Banned")
+                .AddField("Time", DateTime.UtcNow + " UTC")
+                .WithThumbnailUrl("https://pbs.twimg.com/media/C9kEEmbXUAEX3r6.png")
+                .WithAuthor(user)
+                .WithColor(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3);
+
+            await loggingChannel.SendMessageAsync("", false, embed);
+        }
+
+        public static async Task HandleChannelCreate(SocketChannel chnl)
+        {
+            var config = GuildConfig.GetGuildConfig((chnl as SocketTextChannel).Guild.Id);
+            var loggingChannel = (chnl as SocketTextChannel).Guild.GetTextChannel(config.ServerLoggingChannel);
+            var embed = new EmbedBuilder()
+                .AddField("Channel Name", (chnl as SocketGuildChannel).Name)
+                .WithTitle("Channel Created")
+                .AddField("Time", DateTime.UtcNow + " UTC")
+                .WithThumbnailUrl("https://vignette.wikia.nocookie.net/uncyclopedia/images/b/b2/Plus_sign.png/revision/latest?cb=20101129042826")
+                .WithAuthor((chnl as SocketGuildChannel).Guild.Owner)
+                .WithColor(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3);
+
+            await loggingChannel.SendMessageAsync("", false, embed);
+        }
+
+        public static async Task HandleChannelDelete(SocketChannel chnl)
+        {
+            var config = GuildConfig.GetGuildConfig((chnl as SocketTextChannel).Guild.Id);
+            var loggingChannel = (chnl as SocketTextChannel).Guild.GetTextChannel(config.ServerLoggingChannel);
+            var embed = new EmbedBuilder()
+                .AddField("Channel Name", (chnl as SocketGuildChannel).Name)
+                .WithTitle("Channel Deleted")
+                .AddField("Time", DateTime.UtcNow + " UTC")
+                .WithThumbnailUrl("https://openclipart.org/image/2400px/svg_to_png/91861/Remove-349235435.png")
+                .WithAuthor((chnl as SocketGuildChannel).Guild.Owner)
+                .WithColor(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3);
+
+            await loggingChannel.SendMessageAsync("", false, embed);
+        }
+
+        public static async Task HandleServerUpdate(SocketGuild server, SocketGuild guild)
+        {
+            var config = GuildConfig.GetGuildConfig(server.Id);
+            var loggingChannel = guild.GetTextChannel(config.ServerLoggingChannel);
+            var embed = new EmbedBuilder()
+                .AddField("Name", guild.Name)
+                .AddField("Region", guild.VoiceRegionId)
+                .AddField("Owner", $"{guild.Owner.Username}#{guild.Owner.Discriminator}")
+                .WithTitle("Server Updated")
+                .AddField("Time", DateTime.UtcNow + " UTC")
+                .WithThumbnailUrl("https://autisable.com/wp-content/uploads/2016/12/8b9f927f763b78de890fdff3bf5041bda5210d4e_updatestamp.png")
+                .WithAuthor(guild.Owner)
+                .WithColor(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3);
+
+            await loggingChannel.SendMessageAsync("", false, embed);
+        }
+
+        public static async Task HandleMessageDelete(Cacheable<IMessage, ulong> message, ISocketMessageChannel channel)
+        {
+            var msg = message.Value as SocketUserMessage;
+            var context = new SocketCommandContext(Program._client, msg);
+            var config = GuildConfig.GetGuildConfig((message.Value.Channel as SocketTextChannel).Guild.Id);
+            var loggingChannel = context.Guild.GetTextChannel(config.ServerLoggingChannel);
+            var embed = new EmbedBuilder()
+                .AddField("Author", message.Value.Author)
+                .WithTitle("Message Deleted")
+                .AddField("Message Content", message.Value.Content.ToString())
+                .AddField("Time", DateTime.UtcNow + " UTC")
+                .WithThumbnailUrl("https://lh3.googleusercontent.com/G2jzG8a6-GAA4yhxx3XMJfPXsm6_pluyeEWKr9I5swUGF62d2xo_Qg3Kdnu00HAmDQ=s180")
+                .WithAuthor((message.Value.Channel as SocketTextChannel).Guild.Owner)
+                .WithColor(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3);
+
+            await loggingChannel.SendMessageAsync("", false, embed);
+        }
+
+        public static async Task HandleMessageUpdate(Cacheable<IMessage, ulong> message, SocketMessage s, ISocketMessageChannel channel)
+        {
+            var msg = s as SocketUserMessage;
+            var context = new SocketCommandContext(Program._client, msg);
+            var config = GuildConfig.GetGuildConfig(context.Guild.Id);
+            var loggingChannel = context.Guild.GetTextChannel(config.ServerLoggingChannel);
+            var embed = new EmbedBuilder()
+                .AddField("Author", message.Value.Author)
+                .WithTitle("Message Edited")
+                .AddField("Before", message.Value.Content.ToString())
+                .AddField("After", s.Content.ToString())
+                .AddField("Time", DateTime.UtcNow + " UTC")
+                .WithThumbnailUrl("https://lh3.googleusercontent.com/G2jzG8a6-GAA4yhxx3XMJfPXsm6_pluyeEWKr9I5swUGF62d2xo_Qg3Kdnu00HAmDQ=s180")
+                .WithAuthor(context.Guild.Owner)
+                .WithColor(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3);
+
+            await loggingChannel.SendMessageAsync("", false, embed);
+        }
+
+        public static async Task HandleRoleCreation(SocketRole role)
+        {
+            var config = GuildConfig.GetGuildConfig(role.Guild.Id);
+            var loggingChannel = role.Guild.GetTextChannel(config.ServerLoggingChannel);
+            var embed = new EmbedBuilder()
+                .AddField("Name", role.Name)
+                .AddField("ID", role.Id)
+                .WithTitle("Role Created")
+                .AddField("Colour", role.Color.RawValue.ToString())
+                .AddField("Mentionable", role.IsMentionable)
+                .AddField("Displayed Separately", role.IsHoisted)
+                .AddField("Time", DateTime.UtcNow + " UTC")
+                .WithThumbnailUrl("https://lh3.googleusercontent.com/G2jzG8a6-GAA4yhxx3XMJfPXsm6_pluyeEWKr9I5swUGF62d2xo_Qg3Kdnu00HAmDQ=s180")
+                .WithAuthor(role.Guild.Owner)
+                .WithColor(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3);
+
+            await loggingChannel.SendMessageAsync("", false, embed);
+        }
+
+        public static async Task HandleRoleUpdate(SocketRole roleBefore, SocketRole roleAfter)
+        {
+            var config = GuildConfig.GetGuildConfig(roleAfter.Guild.Id);
+            var loggingChannel = roleAfter.Guild.GetTextChannel(config.ServerLoggingChannel);
+            var embed = new EmbedBuilder()
+                .WithDescription(
+                $"**Name**\n" +
+                $"  **Before**: {roleBefore.Name}\n" +
+                $"  **After**: {roleAfter.Name}\n" +
+                $"**Colour**\n" +
+                $"  **Before**: ({roleBefore.Color.R}, {roleBefore.Color.G}, {roleBefore.Color.B})\n" +
+                $"  **After**: ({roleAfter.Color.R}, {roleAfter.Color.G}, {roleAfter.Color.B})\n" +
+                $"**Mentionable**\n" +
+                $"  **Before**: {roleBefore.IsMentionable}\n" +
+                $"  **After**: {roleAfter.IsMentionable}\n" +
+                $"**Displayed Separately**\n" +
+                $"  **Before**: {roleBefore.IsHoisted}\n" +
+                $"  **After**: {roleAfter.IsHoisted}\n" +
+                $"**Time**: {DateTime.UtcNow} UTC")
+                .WithAuthor(roleAfter.Guild.Owner)
+                .WithThumbnailUrl("https://content.mycutegraphics.com/graphics/pencil/sharp-pencil.png")
+                .WithColor(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3);
+
+            await loggingChannel.SendMessageAsync("", false, embed);
+        }
+
+        public static async Task HandleRoleDelete(SocketRole role)
+        {
+            var config = GuildConfig.GetGuildConfig(role.Guild.Id);
+            var loggingChannel = role.Guild.GetTextChannel(config.ServerLoggingChannel);
+            var embed = new EmbedBuilder()
+                .AddField("Name", role.Name)
+                .AddField("ID", role.Id)
+                .WithTitle("Role Deleted")
+                .AddField("Time", DateTime.UtcNow + " UTC")
+                .WithThumbnailUrl("https://lh3.googleusercontent.com/G2jzG8a6-GAA4yhxx3XMJfPXsm6_pluyeEWKr9I5swUGF62d2xo_Qg3Kdnu00HAmDQ=s180")
+                .WithAuthor(role.Guild.Owner)
+                .WithColor(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3);
+
+            await loggingChannel.SendMessageAsync("", false, embed);
+        }
+
+        public static async Task HandleUserUpdate(SocketUser userBefore, SocketUser userAfter)
+        {
+            var uB = userBefore as SocketGuildUser;
+            var uA = userAfter as SocketGuildUser;
+            var config = GuildConfig.GetGuildConfig(uB.Guild.Id);
+            var loggingChannel = uB.Guild.GetTextChannel(config.ServerLoggingChannel);
+            var embed = new EmbedBuilder()
+                .WithDescription(
+                $"**Name**\n" +
+                $"  **Before**: {uB.Username}\n" +
+                $"  **After**: {uA.Username}\n" +
+                $"**Nickname**\n" +
+                $"  **Before**: {uB.Nickname})\n" +
+                $"  **After**: {uA.Nickname}\n" +
+                $"**Profile Pic**\n" +
+                $"  **Before**: {uB.GetAvatarUrl()}\n" +
+                $"  **After**: {uA.GetAvatarUrl()}\n" +
+                $"**Discriminator**\n" +
+                $"  **Before**: {uB.Discriminator}\n" +
+                $"  **After**: {uA.Discriminator}\n" +
+                $"**Time**: {DateTime.UtcNow} UTC")
+                .WithAuthor(uA.Guild.Owner)
+                .WithThumbnailUrl("https://content.mycutegraphics.com/graphics/pencil/sharp-pencil.png")
+                .WithColor(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3);
+
+            await loggingChannel.SendMessageAsync("", false, embed);
+        }
+    }
+}
diff --git a/SIVA/Core/Bot/Program.cs b/SIVA/Core/Bot/Program.cs
new file mode 100644
index 0000000..5ebe8c9
--- /dev/null
+++ b/SIVA/Core/Bot/Program.cs
@@ -0,0 +1,113 @@
+﻿using Discord.WebSocket;
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Threading.Tasks;
+using System.Xml;
+using Discord;
+
+namespace SIVA.Core.Bot
+{
+    internal class Program
+    {
+        public static DiscordSocketClient _client;
+        private EventHandler _handler;
+
+        private static void Main()
+        {
+            Console.Title = "SIVA";
+            Console.CursorVisible = false;
+            Console.ForegroundColor = ConsoleColor.Green;
+            new Program().StartAsync().GetAwaiter().GetResult();
+        }
+
+        private async Task StartAsync()
+        {
+            if (String.IsNullOrEmpty(Config.bot.Token)) 
+            {
+                InteractiveSetup.Setup();
+            }
+
+            LogSeverity logSeverity;
+            switch (Config.bot.LogSeverity)
+            {
+                case "Verbose":
+                case "verbose":
+                    logSeverity = LogSeverity.Verbose;
+                    break;
+                case "Info":
+                case "info":
+                    logSeverity = LogSeverity.Info;
+                    break;
+                case "Warning":
+                case "warning":
+                    logSeverity = LogSeverity.Warning;
+                    break;
+                case "Debug":
+                case "debug":
+                    logSeverity = LogSeverity.Debug;
+                    break;
+                case "Critical":
+                case "critical":
+                    logSeverity = LogSeverity.Critical;
+                    break;
+                case "Error":
+                case "error":
+                    logSeverity = LogSeverity.Error;
+                    break;
+                default:
+                    logSeverity = LogSeverity.Verbose;
+                    break;
+            }
+
+            _client = new DiscordSocketClient(new DiscordSocketConfig {LogLevel = logSeverity} );
+            await _client.LoginAsync(TokenType.Bot, Config.bot.Token);
+            await _client.StartAsync();
+            await _client.SetGameAsync(Config.bot.BotGameToSet, $"https://twitch.tv/{Config.bot.TwitchStreamer}", StreamType.Twitch);
+            await _client.SetStatusAsync(UserStatus.DoNotDisturb);
+            _client.Log += EventUtils.Log;
+            _handler = new EventHandler();
+            await _handler.InitializeAsync(_client);
+            Console.WriteLine("Public SIVA: https://discordapp.com/oauth2/authorize?scope=bot&client_id=320942091049893888&permissions=8");
+            Console.WriteLine("Dev SIVA: https://discordapp.com/oauth2/authorize?scope=bot&client_id=410547925597421571&permissions=8");
+            //SivaPanel.StartPanel(); this method isnt needed for a while
+            await Task.Delay(-1);
+        }
+
+        /*private async Task ConsoleInput()
+        {
+            string input = string.Empty;
+            while (input.Trim().ToLower() != "stop")
+            {
+                input = Console.ReadLine();
+                _handler._service.ExecuteAsync();
+            }
+        }
+
+        private void ConsoleSendMessage()
+        {
+            Console.Write("Select a Guild: ");
+            SocketGuild guild = GetSelectedGuild(_client.Guilds);
+        }
+
+        private SocketGuild GetSelectedGuild(IEnumerable<SocketGuild> guilds)
+        {
+            var socketGuilds = guilds.ToList();
+            var maxIndex = socketGuilds.Count - 1;
+            for (var i = 0; i <= maxIndex; i++)
+            {
+                Console.WriteLine($"{i} - {socketGuilds[i].Name}");
+            }
+
+            var selectedIndex = -1;
+            while (selectedIndex < 0 || selectedIndex > maxIndex)
+            {
+                var success = int.TryParse(Console.ReadLine().Trim(), out selectedIndex);
+                if (!success) Console.WriteLine("That wasn't a number you shit.");
+                if (selectedIndex < 0 || selectedIndex > maxIndex) Console.WriteLine($"That index was below 0 or above {maxIndex}. Try again.");
+            }
+
+            return socketGuilds[selectedIndex];
+        }*/
+    }
+}
diff --git a/SIVA/Core/Bot/Support.cs b/SIVA/Core/Bot/Support.cs
new file mode 100644
index 0000000..d1697ed
--- /dev/null
+++ b/SIVA/Core/Bot/Support.cs
@@ -0,0 +1,111 @@
+﻿using Discord;
+using Discord.Commands;
+using Discord.WebSocket;
+using System.Threading.Tasks;
+using System;
+using System.Linq;
+using System.Threading;
+using SIVA.Core.JsonFiles;
+
+namespace SIVA.Core.Bot
+{
+    internal static class Support
+    {
+        public static async Task SupportSystem(SocketMessage s)
+        {
+            var msg = s as SocketUserMessage;
+            if (msg == null) return;
+            var context = new SocketCommandContext(new DiscordSocketClient(), msg);
+            if (context.User.IsBot) return;
+            var user = context.User as SocketGuildUser;
+
+            var config = GuildConfig.GetGuildConfig(context.Guild.Id) ??
+                         GuildConfig.CreateGuildConfig(context.Guild.Id);
+            config.GuildOwnerId = context.Guild.OwnerId;
+            var adminRole = context.Guild.Roles.FirstOrDefault(x => x.Id == config.AdminRole);
+
+            if (msg.Content == "SetupSupport" && user.Roles.Contains(adminRole))
+            {
+                var embed = new EmbedBuilder();
+                embed.WithColor(Config.bot.DefaultEmbedColour);
+                embed.WithDescription(Utilities.GetLocaleMsg("SupportEmbedText"));
+                embed.WithAuthor(context.Guild.Owner);
+                await context.Channel.SendMessageAsync("", false, embed);
+                config.SupportChannelId = context.Channel.Id;
+                config.SupportChannelName = context.Channel.Name;
+                config.CanCloseOwnTicket = true;
+                GuildConfig.SaveGuildConfig();
+
+            }
+            
+            if (msg.Content != "SetupSupport")
+            {
+                var supportConfig = GuildConfig.GetGuildConfig(context.Guild.Id);
+                var supportStartChannel = context.Guild.Channels.FirstOrDefault(c => c.Name == supportConfig.SupportChannelName);
+
+                if (msg.Channel == supportStartChannel)
+                {
+                    var supportChannelExists = context.Guild.Channels.FirstOrDefault(c => c.Name == $"{supportConfig.SupportChannelName}-{context.User.Id}");
+                    var role = context.Guild.Roles.FirstOrDefault(r => r.Name == supportConfig.SupportRole);
+
+                    if (supportChannelExists == null)
+                    {
+
+                        await msg.DeleteAsync();
+                        var chnl = await context.Guild.CreateTextChannelAsync($"{supportConfig.SupportChannelName}-{context.User.Id}");
+                        await chnl.AddPermissionOverwriteAsync(context.User, new OverwritePermissions(readMessages: PermValue.Allow, sendMessages: PermValue.Allow, addReactions: PermValue.Allow, sendTTSMessages: PermValue.Deny));
+                        await chnl.AddPermissionOverwriteAsync(context.Guild.EveryoneRole, new OverwritePermissions(readMessages: PermValue.Deny, sendMessages: PermValue.Deny));
+                        if (role != null)
+                        {
+                            await chnl.AddPermissionOverwriteAsync(role, OverwritePermissions.AllowAll(chnl));
+                        }
+                        
+                        await chnl.ModifyAsync(x =>
+                        {
+                            x.Position = supportStartChannel.Position - 1;
+                            x.Topic = $"Support ticket created by <@{msg.Author.Id}> at {DateTime.UtcNow} (UTC)";
+                        });
+                        var embed = new EmbedBuilder()
+                            .WithAuthor(msg.Author)
+                            .WithThumbnailUrl(context.User.GetAvatarUrl())
+                            .WithTitle("What do you need help with?")
+                            .WithDescription($"```{msg.Content}```\n\nIf you're done with the ticket, type `{config.CommandPrefix}close`, or react to the message with ☑.")
+                            .WithColor(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3)
+                            .WithFooter($"Time Created: {DateTime.Now}");
+                        var message = await chnl.SendMessageAsync($"You can close this ticket if you have the role set for moderating tickets: `{supportConfig.SupportRole}`", false, embed);
+                        await message.PinAsync();
+                        await message.AddReactionAsync(new Emoji("☑"));
+                        
+
+                    }
+                    else
+                    {
+                        var channel = context.Guild.GetTextChannel(supportChannelExists.Id);
+                        await channel.SendMessageAsync($"{context.User.Mention}, please send your message here rather than the primary support channel. Text: ```{msg.Content}``` If you cannot type in here, please tell an admin.");
+                        await msg.DeleteAsync();
+                    }
+                }
+            }
+        }
+
+        public static async Task DeleteSupportChannel(Cacheable<IUserMessage, ulong> cache, ISocketMessageChannel ch, SocketReaction s)
+        {
+            var channel = s.Channel as SocketGuildChannel; //allow us to send a message
+            var config = GuildConfig.GetGuildConfig(channel.Guild.Id); //get the config so we can see the support channel name. (and embed colour)
+            var embed = new EmbedBuilder() //create the embedded message.
+                .WithColor(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3)
+                .WithDescription($"Ticket marked as solved by {s.User.Value.Mention}! Closing in 45 seconds.")
+                .WithAuthor(s.User.Value);
+            if (channel.Name.Contains($"{config.SupportChannelName}-{s.UserId}") && s.Emote.Equals(new Emoji("☑"))) //check if a user made the reaction in a support ticket, 
+                //check if the emote is `☑` and then delete the channel.
+            {
+                if (s.UserId != 320942091049893888 && s.UserId != 410547925597421571) //check if the id of the person who made the reaction is NOT SIVA-dev or SIVA public.
+                {
+                    await ch.SendMessageAsync("", false, embed); //send the embedded message defined above.
+                    Thread.Sleep(45000); //wait 45 seconds (45000ms)
+                    await channel.DeleteAsync(); //delete the channel
+                }
+            }
+        }
+    }
+}
diff --git a/SIVA/Core/Bot/Utilities.cs b/SIVA/Core/Bot/Utilities.cs
new file mode 100644
index 0000000..206fcf1
--- /dev/null
+++ b/SIVA/Core/Bot/Utilities.cs
@@ -0,0 +1,94 @@
+﻿using System;
+using System.Collections.Generic;
+using Newtonsoft.Json;
+using System.IO;
+
+namespace SIVA.Core.Bot
+{
+    class Utilities
+    {
+        private static Dictionary<string, string> alerts; 
+
+        static Utilities()
+        {
+            string json = File.ReadAllText("Resources/Locale.json");
+            var data = JsonConvert.DeserializeObject<dynamic>(json);
+            alerts = data.ToObject<Dictionary<string, string>>();
+        }
+
+        public static string GetLocaleMsg(string key)
+        {
+            if (alerts.ContainsKey(key)) return alerts[key];
+            return "";
+        }
+
+        public static string GetFormattedLocaleMsg(string key, params object[] parameter)
+        {
+            if (alerts.ContainsKey(key))
+            {
+                return String.Format(alerts[key], parameter);
+            }
+            return "";
+        }
+
+        public static string GetFormattedLocaleMsg(string key, object parameter)
+        {
+            return GetFormattedLocaleMsg(key, new object[] { parameter });
+        }
+
+        public static string InlineMsg(string msg)
+        {
+            return $"`{msg}`";
+        }
+
+        public static string CodeBlock(string msg)
+        {
+            return $"```{msg}```";
+        }
+
+        public static string Italic(string msg)
+        {
+            return $"*{msg}*";
+        }
+
+        public static string Bold(string msg)
+        {
+            return $"**{msg}**";
+        }
+
+        public static string BoldItalic(string msg)
+        {
+            return $"***{msg}***";
+        }
+
+        public static string Underline(string msg)
+        {
+            return $"__{msg}__";
+        }
+
+        public static string Strikethrough(string msg)
+        {
+            return $"~~{msg}~~";
+        } 
+
+        public static int Multiply(int a, int b)
+        {
+            return a * b;
+        }
+
+        public static float Divide(int a, int b)
+        {
+            return a / b;
+        }
+
+        public static int Add(int a, int b)
+        {
+            return a + b;
+        }
+
+        public static int Subtract(int a, int b)
+        {
+            return a - b;
+        }
+    }
+}
diff --git a/SIVA/Core/JsonFiles/GuildConfig.cs b/SIVA/Core/JsonFiles/GuildConfig.cs
new file mode 100644
index 0000000..d2abb5d
--- /dev/null
+++ b/SIVA/Core/JsonFiles/GuildConfig.cs
@@ -0,0 +1,120 @@
+﻿using Newtonsoft.Json;
+using System;
+using System.Collections.Generic;
+using System.IO;
+using System.Linq;
+
+namespace SIVA.Core.JsonFiles
+{
+    public class Guild
+    {
+        public Guild()
+        {
+            AntilinkIgnoredChannels = new List<ulong>();
+            SelfRoles = new List<string>();
+            Blacklist = new List<string>();
+            CustomCommands = new Dictionary<string, string>();
+        }
+
+        public ulong ServerId { get; set; }
+        public bool CanCloseOwnTicket { get; set; }
+        public ulong GuildOwnerId { get; set; }
+        public string SupportChannelName { get; set; }
+        public ulong SupportChannelId { get; set; }
+        public string SupportRole { get; set; }
+        public string Autorole { get; set; }
+        public string CommandPrefix { get; set; }
+        public bool Leveling { get; set; }
+        public ulong WelcomeChannel { get; set; }
+        public string WelcomeMessage { get; set; }
+        public string LeavingMessage { get; set; }
+        public int WelcomeColour1 { get; set; }
+        public int WelcomeColour2 { get; set; }
+        public int WelcomeColour3 { get; set; }
+        public int EmbedColour1 { get; set; }
+        public int EmbedColour2 { get; set; }
+        public int EmbedColour3 { get; set; }
+        public bool MassPengChecks { get; set; }
+        public int ModlogCase { get; set; } // not used
+        public bool Antilink { get; set; }
+        public bool VerifiedGuild { get; set; }
+        public ulong ModRole { get; set; }
+        public ulong AdminRole { get; set; }
+        public bool IsTodEnabled { get; set; }
+        public ulong ServerLoggingChannel { get; set; }
+        public bool IsServerLoggingEnabled { get; set; }
+        public List<ulong> AntilinkIgnoredChannels { get; set; }
+        public List<string> SelfRoles { get; set; }
+        public List<string> Blacklist { get; set; }
+        public Dictionary<string, string> CustomCommands { get; set; }
+    }
+
+    public static class GuildConfig
+    {
+        static GuildConfig()
+        {
+            try
+            {
+                var jsonText = File.ReadAllText(filePath);
+                Config = JsonConvert.DeserializeObject<List<Guild>>(jsonText);
+            }
+            catch(Exception)
+            {
+                SaveGuildConfig();
+            }
+        }
+
+        private static readonly List<Guild> Config = new List<Guild>();
+        private static string filePath = "Resources/GuildConfigs.json";
+
+        public static Guild GetGuildConfig(ulong id)
+        {
+            var result = Config.FirstOrDefault(x => x.ServerId == id);
+
+            var config = result;
+            return config;
+        }
+
+        public static Guild GetOrCreateConfig(ulong id)
+        {
+            var result = Config.FirstOrDefault(x => x.ServerId == id);
+
+            var config = result ?? CreateGuildConfig(id);
+            return config;
+        }
+
+        public static void SaveGuildConfig()
+        {
+            var json = JsonConvert.SerializeObject(Config, Formatting.Indented);
+            File.WriteAllText(filePath, json);
+        }
+
+        public static Guild CreateGuildConfig(ulong id)
+        {
+            var newconfig = new Guild
+            {
+                ServerId = id,
+                GuildOwnerId = 0,
+                Autorole = "",
+                SupportChannelName = "",
+                SupportRole = "Support",
+                CanCloseOwnTicket = true,
+                SupportChannelId = 00000000000000,
+                CommandPrefix = "$",
+                WelcomeChannel = 0,
+                ModlogCase = 0,
+                WelcomeColour1 = 112,
+                WelcomeColour2 = 0,
+                WelcomeColour3 = 251,
+                EmbedColour1 = 112,
+                EmbedColour2 = 0,
+                EmbedColour3 = 251,
+                Antilink = false,
+                VerifiedGuild = false
+            };
+            Config.Add(newconfig);
+            SaveGuildConfig();
+            return newconfig;
+        }
+    }
+}
diff --git a/SIVA/Core/JsonFiles/TruthOrDare.cs b/SIVA/Core/JsonFiles/TruthOrDare.cs
new file mode 100644
index 0000000..2cca068
--- /dev/null
+++ b/SIVA/Core/JsonFiles/TruthOrDare.cs
@@ -0,0 +1,58 @@
+﻿using Newtonsoft.Json;
+using System;
+using System.Collections.Generic;
+using System.IO;
+using System.Linq;
+
+namespace SIVA.Core.JsonFiles
+{
+    public class TruthOrDare
+    {
+        public TruthOrDare()
+        {
+            Truths = new List<string>();
+            Dares = new List<string>();
+        }
+
+        public List<string> Truths { get; set; }
+        public List<string> Dares { get; set; }
+    }
+
+    public class TruthOrDareJson
+    {
+        static TruthOrDareJson()
+        {
+            try
+            {
+                var jsonText = File.ReadAllText(filePath);
+                TruthOrDare = JsonConvert.DeserializeObject<List<TruthOrDare>>(jsonText);
+            }
+            catch (Exception)
+            {
+                File.Create("Resources/TruthOrDare.json");
+            }
+        }
+
+        private static readonly List<TruthOrDare> TruthOrDare = new List<TruthOrDare>();
+        private static string filePath = "Resources/TruthOrDare.json";
+
+        public static TruthOrDare LoadJson()
+        {
+            return TruthOrDare.First();
+        }
+
+        /*public static void AddTruthToJson(string truth)
+        {
+            LoadJson().Truths.Add(truth);
+            var json = JsonConvert.SerializeObject(TruthOrDare, Formatting.Indented);
+            File.WriteAllText(filePath, json);
+        }
+
+        public static void AddDareToJson(string dare)
+        {
+            LoadJson().Dares.Add(dare);
+            var json = JsonConvert.SerializeObject(TruthOrDare, Formatting.Indented);
+            File.WriteAllText(filePath, json);
+        }*/
+    }
+}
diff --git a/SIVA/Core/JsonFiles/UserAccounts.cs b/SIVA/Core/JsonFiles/UserAccounts.cs
new file mode 100644
index 0000000..dd50281
--- /dev/null
+++ b/SIVA/Core/JsonFiles/UserAccounts.cs
@@ -0,0 +1,105 @@
+﻿using Discord.WebSocket;
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.IO;
+using Newtonsoft.Json;
+
+namespace SIVA.Core.JsonFiles
+{
+    public static class DataStorage
+    {
+        public static void SaveUserAccounts(IEnumerable<UserAccount> accounts, string filePath)
+        {
+            string json = JsonConvert.SerializeObject(accounts, Formatting.Indented);
+            File.WriteAllText(filePath, json);
+        }
+
+        public static IEnumerable<UserAccount> LoadUserAccounts(string filePath)
+        {
+            if (!File.Exists(filePath)) return null;
+            string json = File.ReadAllText(filePath);
+            return JsonConvert.DeserializeObject<List<UserAccount>>(json);
+        }
+
+        public static bool SaveExists(string filePath)
+        {
+            return File.Exists(filePath);
+        }
+    }
+
+    public class UserAccount
+    {
+        /*public UserAccount()
+        {
+            Warns = new Dictionary<ulong, string>();
+        }*/
+
+        public ulong Id { get; set; }
+
+        public uint Xp { get; set; }
+
+        public uint LevelNumber => (uint)Math.Sqrt(Xp / 50);
+
+        //public Dictionary<ulong, string> Warns { get; set; }
+
+        //public uint WarnCount { get; set; }
+
+        public int Money { get; set; }
+
+    }
+
+    public static class UserAccounts
+    {
+        private static List<UserAccount> accounts;
+
+        private static string accountsFile = "Resources/UAccounts.json";
+
+        static UserAccounts()
+        {
+            if (DataStorage.SaveExists(accountsFile))
+            {
+                accounts = DataStorage.LoadUserAccounts(accountsFile).ToList();
+            }
+            else
+            {
+                accounts = new List<UserAccount>();
+                SaveAccounts();
+            }
+        }
+
+        public static void SaveAccounts()
+        {
+            DataStorage.SaveUserAccounts(accounts, accountsFile);
+        }
+
+        public static UserAccount GetAccount(SocketUser user)
+        {
+            return GetOrCreateAccount(user.Id);
+        }
+
+        private static UserAccount GetOrCreateAccount(ulong id)
+        {
+            var result = from a in accounts
+                         where a.Id == id
+                         select a;
+
+            var account = result.FirstOrDefault();
+            if (account == null) account = CreateUserAccount(id);
+            return account;
+        }
+
+        private static UserAccount CreateUserAccount(ulong id)
+        {
+            var newAccount = new UserAccount()
+            {
+                Id = id,
+                Xp = 5,
+                Money = 0
+            };
+            accounts.Add(newAccount);
+            SaveAccounts();
+            return newAccount;
+        }
+    }
+}
diff --git a/SIVA/Core/Modules/Economy/Economy.cs b/SIVA/Core/Modules/Economy/Economy.cs
new file mode 100644
index 0000000..bd24a09
--- /dev/null
+++ b/SIVA/Core/Modules/Economy/Economy.cs
@@ -0,0 +1,84 @@
+﻿using Discord.Commands;
+using System.Threading.Tasks;
+using Discord;
+using Discord.WebSocket;
+using System;
+using SIVA.Core.Bot;
+using SIVA.Core.JsonFiles;
+
+namespace SIVA.Core.Modules.Economy
+{
+    public class Economy : ModuleBase<SocketCommandContext>
+    {
+        [Command("WhatLevelIs"), Alias("WLI")]
+        public async Task WhatLevelIs(uint xp)
+        {
+            uint level = (uint)Math.Sqrt(xp / 50);
+            await ReplyAsync("The level is " + level);
+        }
+
+        [Command("Level"), Priority(0)]
+        public async Task Level()
+        {
+            var ua = UserAccounts.GetAccount(Context.User);
+            var embed = new EmbedBuilder();
+            embed.WithTitle("User Level");
+            embed.WithDescription(Bot.Utilities.GetFormattedLocaleMsg("LevelCommandText", Context.User.Mention, ua.LevelNumber));
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithColor(Bot.Config.bot.DefaultEmbedColour);
+
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("Level"), Priority(1)]
+        public async Task Level(SocketGuildUser user)
+        {
+            var ua = UserAccounts.GetAccount(user);
+            var embed = new EmbedBuilder();
+            embed.WithTitle("User Level");
+            embed.WithDescription(Bot.Utilities.GetFormattedLocaleMsg("LevelCommandText", user.Mention, ua.LevelNumber));
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithColor(Bot.Config.bot.DefaultEmbedColour);
+
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("Money"), Alias("$", "bal")]
+        public async Task HowMuchDoIHave()
+        {
+            var ua = UserAccounts.GetAccount(Context.User);
+            var bal = ua.Money.ToString();
+            var embed = new EmbedBuilder();
+
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithDescription(Bot.Utilities.GetFormattedLocaleMsg("MoneyCommandText", bal));
+            embed.WithColor(Bot.Config.bot.DefaultEmbedColour);
+            embed.WithThumbnailUrl("http://www.stickpng.com/assets/images/580b585b2edbce24c47b2878.png");
+
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("Pay")]
+        public async Task PayAUser(SocketGuildUser user, int amt)
+        {
+            var embed = new EmbedBuilder();
+            embed.WithColor(Bot.Config.bot.DefaultEmbedColour);
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            var ua = UserAccounts.GetAccount(Context.User);
+            var ua1 = UserAccounts.GetAccount(user);
+            if (ua.Money < amt)
+            {
+                embed.WithDescription($"You don't have enough money, {Context.User.Mention}!");
+                await ReplyAsync("", false, embed);
+            }
+            else
+            {
+                ua.Money = ua.Money - amt;
+                ua1.Money = ua1.Money + amt;
+                UserAccounts.SaveAccounts();
+                embed.WithDescription($"{Context.User.Mention} paid {user.Mention} {Bot.Config.bot.CurrencySymbol}{amt}!");
+                await ReplyAsync("", false, embed);
+            }
+        }
+    }
+}
diff --git a/SIVA/Core/Modules/General/Games.cs b/SIVA/Core/Modules/General/Games.cs
new file mode 100644
index 0000000..83df5e7
--- /dev/null
+++ b/SIVA/Core/Modules/General/Games.cs
@@ -0,0 +1,49 @@
+﻿using Discord;
+using Discord.Commands;
+using System.Threading.Tasks;
+using SIVA.Core.JsonFiles;
+using System;
+
+namespace SIVA.Core.Modules.General
+{
+    public class Games : ModuleBase<SocketCommandContext>
+    {
+        [Command("Truth")]
+        public async Task LoadTruthFromJson()
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            if (!config.IsTodEnabled) return;
+            var json = TruthOrDareJson.LoadJson();
+            var r = new Random().Next(0, json.Truths.Count);
+            var truthsList = json.Truths.ToArray();
+            var truth = truthsList[r];
+
+            var embed = new EmbedBuilder()
+                .WithDescription(truth)
+                .WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3))
+                .WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+
+            await ReplyAsync("", false, embed);
+            
+        }
+
+        [Command("Dare")]
+        public async Task LoadDareFromJson()
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            if (!config.IsTodEnabled) return;
+            var json = TruthOrDareJson.LoadJson();
+            var r = new Random().Next(0, json.Dares.Count);
+            var daresList = json.Dares.ToArray();
+            var dare = daresList[r];
+
+            var embed = new EmbedBuilder()
+                .WithDescription(dare)
+                .WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3))
+                .WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+
+            await ReplyAsync("", false, embed);
+
+        }
+    }
+}
\ No newline at end of file
diff --git a/SIVA/Core/Modules/General/General.cs b/SIVA/Core/Modules/General/General.cs
new file mode 100644
index 0000000..4aa7447
--- /dev/null
+++ b/SIVA/Core/Modules/General/General.cs
@@ -0,0 +1,140 @@
+﻿using Discord;
+using Discord.Commands;
+using Discord.WebSocket;
+using System;
+using SIVA.Core.JsonFiles;
+using System.Threading.Tasks;
+using System.Linq;
+using SIVA.Core.Bot;
+
+namespace SIVA.Core.Modules.General
+{
+    public class General : ModuleBase<SocketCommandContext>
+    {
+
+        [Command("Stats")]
+        public async Task MyStats([Remainder]string arg = "")
+        {
+            var mentionedUser = Context.Message.MentionedUsers.FirstOrDefault();
+            var target = mentionedUser ?? Context.User;
+            
+            if (Context.Guild.Id == 377879473158356992)
+            {
+                await ReplyAsync("That command is disabled on this server.");
+            }
+            else
+            {
+                var account = UserAccounts.GetAccount(target);
+                await ReplyAsync($"**{target.Username}** is level {account.LevelNumber}, and has {account.Xp} XP.");
+            }
+        }
+
+        [Command("Prefix")]
+        public async Task GetPrefixForServer()
+        {
+            var config = GuildConfig.GetGuildConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder();
+            string prefix;
+            switch (config)
+            {
+                case null:
+                    prefix = Config.bot.Prefix;
+                    break;
+                default:
+                    prefix = config.CommandPrefix;
+                    break;
+            }
+
+            embed.WithDescription($"The prefix for this server is `{prefix}`");
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("Lenny")]
+        public async Task LennyLol()
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder()
+                .WithDescription("( ͡° ͜ʖ ͡°)")
+                .WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3))
+                .WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username))
+                .WithAuthor(Context.User);
+
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("Say")]
+        [RequireBotPermission(GuildPermission.ManageMessages)]
+        public async Task SayCommand([Remainder]string message)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder();
+            embed.WithDescription(message);
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            await Context.Message.DeleteAsync();
+
+            if (Config.bot.Debug)
+            {
+                Console.WriteLine($"DEBUG: {Context.User.Username}#{Context.User.Discriminator} used the say command in the channel #{Context.Channel.Name} and said \"{message}\".");
+                await ReplyAsync("", false, embed);
+            } 
+            else
+            {
+                await ReplyAsync("", false, embed);
+            }
+        }
+
+        [Command("Choose")]
+        public async Task PickOne([Remainder]string message)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            string[] options = message.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);
+
+            Random r = new Random();
+            string selection = options[r.Next(0, options.Length)];
+
+            var embed = new EmbedBuilder();
+            embed.WithDescription(Bot.Utilities.GetFormattedLocaleMsg("PickCommandText", selection));
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("Roast")]
+        public async Task Roast()
+        {   //this doesnt have any other roasts as its incomplete
+            await ReplyAsync(Context.User.Mention + ", maybe you would talk better if your parents were second cousins rather than first cousins.");
+        }
+
+        [Command("Info")]
+        public async Task InformationCommand()
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder();
+            embed.AddField("Version", Bot.Utilities.GetLocaleMsg("VersionString"));
+            embed.AddField("Author", "<@168548441939509248>");
+            embed.AddField("Language", "C# with Discord.Net");
+            embed.AddField("Server", "https://discord.io/SIVA");
+            embed.AddField("Servers", (Context.Client as DiscordSocketClient).Guilds.Count);
+            embed.AddField("Invite Me", "https://bot.discord.io/SIVA");
+            embed.AddField("Ping", (Context.Client as DiscordSocketClient).Latency);
+            embed.AddField("Client ID", Program._client.CurrentUser.Id);
+            embed.AddField("Invite my Nadeko", "https://bot.discord.io/snadeko");
+            embed.WithThumbnailUrl("https://pbs.twimg.com/media/Cx0i4LOVQAIyLRU.png");
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+
+            await ReplyAsync("", false, embed);
+
+        }
+
+        [Command("Suggest")]
+        public async Task Suggest()
+        {
+            await ReplyAsync("<https://goo.gl/forms/i6pgYTSnDdMMNLZU2>");
+        }
+
+    }
+}
diff --git a/SIVA/Core/Modules/General/Help.cs b/SIVA/Core/Modules/General/Help.cs
new file mode 100644
index 0000000..245bb7a
--- /dev/null
+++ b/SIVA/Core/Modules/General/Help.cs
@@ -0,0 +1,26 @@
+﻿using Discord;
+using Discord.Commands;
+using System.Threading.Tasks;
+using SIVA.Core.JsonFiles;
+
+namespace SIVA.Core.Modules.General
+{
+    public class Help : ModuleBase<SocketCommandContext>
+    {
+        [Command("Help"), Alias("H")]
+        [Summary("Shows commands for the bot.")]
+        public async Task HelpCommand()
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder();
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithDescription(Bot.Utilities.GetFormattedLocaleMsg("HelpString"));
+            await Context.Message.AddReactionAsync(new Emoji("☑"));
+
+            var dm = await Context.User.GetOrCreateDMChannelAsync();
+            await dm.SendMessageAsync("", false, embed);
+
+        }
+    }
+}
diff --git a/SIVA/Core/Modules/Management/Admin.cs b/SIVA/Core/Modules/Management/Admin.cs
new file mode 100644
index 0000000..5963d0b
--- /dev/null
+++ b/SIVA/Core/Modules/Management/Admin.cs
@@ -0,0 +1,617 @@
+﻿using Discord.Commands;
+using System.Threading.Tasks;
+using Discord.WebSocket;
+using SIVA.Core.JsonFiles;
+using System.Linq;
+using Discord;
+using SIVA.Core.Bot;
+
+namespace SIVA.Core.Modules.Management
+{
+    public class Admin : ModuleBase<SocketCommandContext>
+    {
+        [Command("ServerName")]
+        [RequireUserPermission(GuildPermission.Administrator)]
+        public async Task ModifyServerName([Remainder]string name)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            await Context.Guild.ModifyAsync(x => x.Name = name);
+            var embed = new EmbedBuilder();
+            embed.WithDescription($"Set this server's name to **{name}**!");
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+
+            await SendMessage(embed);
+        }
+
+        [Command("BlacklistAdd"), Alias("Bladd")]
+        [RequireUserPermission(GuildPermission.Administrator)]
+        public async Task AddStringToBl([Remainder]string bl)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            config.Blacklist.Add(bl);
+            GuildConfig.SaveGuildConfig();
+            var embed = new EmbedBuilder();
+            embed.WithDescription($"Added {bl} to the Blacklist.");
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+
+            await SendMessage(embed);
+        }
+
+        [Command("BlacklistRemove"), Alias("Blrem")]
+        [RequireUserPermission(GuildPermission.Administrator)]
+        public async Task RemoveStringFromBl([Remainder]string bl)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder();
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            if (!config.Blacklist.Contains(bl))
+            {
+                embed.WithDescription($"`{bl}` isn't present in the Blacklist.");
+            }
+            else
+            {
+                embed.WithDescription($"Removed {bl} from the Blacklist.");
+                config.Blacklist.Remove(bl);
+                GuildConfig.SaveGuildConfig();
+            }
+
+            await SendMessage(embed);
+        }
+
+        [Command("BlacklistClear"), Alias("Blcl")]
+        [RequireUserPermission(GuildPermission.Administrator)]
+        public async Task ClearBlacklist()
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            config.Blacklist.Clear();
+            GuildConfig.SaveGuildConfig();
+            var embed = new EmbedBuilder();
+            embed.WithDescription("Cleared the Blacklist for this server.");
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+
+            await SendMessage(embed);
+        }
+
+        [Command("CustomCommandAdd"), Alias("Cca")]
+        [RequireUserPermission(GuildPermission.Administrator)]
+        public async Task AddCustomCommand(string commandName, [Remainder]string commandValue)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            config.CustomCommands.Add(commandName, commandValue);
+            GuildConfig.SaveGuildConfig();
+            var embed = new EmbedBuilder()
+                .AddField("Command Name", $"__{commandName}__")
+                .AddField("Bot Response", $"**{commandValue}**")
+                .WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3))
+                .WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+
+            await SendMessage(embed);
+        }
+
+        [Command("CustomCommandRem"), Alias("Ccr")]
+        [RequireUserPermission(GuildPermission.Administrator)]
+        public async Task RemCustomCommand(string commandName)
+        {
+            var config = GuildConfig.GetGuildConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder()
+                .WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3))
+                .WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            if (config.CustomCommands.Keys.Contains(commandName))
+            {
+                embed.WithDescription($"Removed **{commandName}** as a command!");
+                config.CustomCommands.Remove(commandName);
+                GuildConfig.SaveGuildConfig();
+            }
+            else
+            {
+                embed.WithDescription($"**{commandName}** isn't a command on this server.");
+            }
+
+            await SendMessage(embed);
+        }
+
+        [Command("ServerLogging"), Alias("Sl")]
+        [RequireUserPermission(GuildPermission.Administrator)]
+        public async Task SetServerLoggingChannel(bool isEnabled, SocketTextChannel chnl = null)
+        {
+            string lol;
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            if (isEnabled) { lol = "Enabled server logging"; } else { lol = "Disabled server logging"; }
+            if (chnl == null) { chnl = (SocketTextChannel)Context.Channel; }
+            config.IsServerLoggingEnabled = isEnabled;
+            config.ServerLoggingChannel = chnl.Id;
+            GuildConfig.SaveGuildConfig();
+            var embed = Helpers.CreateEmbed(Context, $"{lol}, and set the channel to <#{chnl.Id}>.");
+            await Helpers.SendMessage(Context, embed);
+        }
+
+        [Command("AdminRole")]
+        [RequireUserPermission(GuildPermission.Administrator)]
+        public async Task SetServerAdminRole(string roleName)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder()
+                .WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3))
+                .WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            var role = Context.Guild.Roles.FirstOrDefault(x => x.Name == roleName);
+            if (role == null)
+            {
+                embed.WithDescription($"The role `{roleName}` doesn't exist on this server. Remember that this command is cAsE sEnSiTiVe.");
+            }
+            else
+            {
+                embed.WithDescription($"Set the Administrator role to **{roleName}** for this server!");
+                config.AdminRole = role.Id;
+                GuildConfig.SaveGuildConfig();
+            }
+
+            await SendMessage(embed);
+        }
+
+        [Command("ModRole")]
+        [RequireUserPermission(GuildPermission.Administrator)]
+        public async Task SetServerModRole(string roleName)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder()
+                .WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3))
+                .WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+
+            var role = Context.Guild.Roles.FirstOrDefault(x => x.Name == roleName);
+            if (role == null)
+            {
+                embed.WithDescription($"The role `{roleName}` doesn't exist on this server. Remember that this command is cAsE sEnSiTiVe.");
+            }
+            else
+            {
+                embed.WithDescription($"Set the Moderator role to **{roleName}** for this server!");
+                config.ModRole = role.Id;
+                GuildConfig.SaveGuildConfig();
+            }
+
+            await SendMessage(embed);
+        }
+
+        [Command("EmbedColour"), Alias("Ec", "EmbedColor")]
+        [RequireUserPermission(GuildPermission.Administrator)]
+        public async Task SetColorForDonatorsIntoJson(int r, int g, int b)
+        {
+            var config = GuildConfig.GetGuildConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder()
+                .WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            if (config.VerifiedGuild)
+            {
+                config.EmbedColour1 = r;
+                config.EmbedColour2 = g;
+                config.EmbedColour3 = b;
+                GuildConfig.SaveGuildConfig();
+                embed.WithDescription($"Set the embed colour for this guild to `{r} {g} {b}`!");
+                embed.WithColor(new Color(r, g, b));
+            }
+            else
+            {
+                embed.WithDescription($"This feature and command is for donators only! Consider donating to unlock: `{config.CommandPrefix}donate`.");
+                embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            }
+
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("PengChecks"), Alias("Pc")]
+        [RequireUserPermission(GuildPermission.Administrator)]
+        public async Task SetBoolToJson(bool arg)
+        {
+            var config = GuildConfig.GetGuildConfig(Context.Guild.Id) ??
+                         GuildConfig.CreateGuildConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder();
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithDescription(arg
+                ? "Enabled mass peng checks for this server."
+                : "Disabled mass peng checks for this server.");
+
+            config.MassPengChecks = arg;
+            GuildConfig.SaveGuildConfig();
+            await SendMessage(embed);
+        }
+
+        [Command("Antilink"), Alias("Al")]
+        [RequireUserPermission(GuildPermission.Administrator)]
+        public async Task SetBoolIntoConfig(bool setting)
+        {
+            var config = GuildConfig.GetGuildConfig(Context.Guild.Id) ?? GuildConfig.CreateGuildConfig(Context.Guild.Id);
+            config.Antilink = setting;
+            GuildConfig.SaveGuildConfig();
+            var embed = new EmbedBuilder();
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            if (setting) embed.WithDescription("Enabled Antilink for this server.");
+            if (setting == false) embed.WithDescription("Disabled Antilink for this server.");
+            await ReplyAsync("", false, embed);
+
+        }
+
+        [Command("TruthOrDare"), Alias("Tod")]
+        [RequireUserPermission(GuildPermission.Administrator)]
+        public async Task DisableSlashEnableTod(bool setting)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            config.IsTodEnabled = setting;
+            GuildConfig.SaveGuildConfig();
+            var embed = new EmbedBuilder()
+                .WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3))
+                .WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            if (setting) embed.WithDescription("Enabled Truth or Dare for this server.");
+            if (setting == false) embed.WithDescription("Disabled Truth or Dare for this server.");
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("AntilinkIgnore"), Alias("Ali")]
+        [RequireUserPermission(GuildPermission.Administrator)]
+        public async Task SetChannelToBeIgnored(string type, SocketGuildChannel chnl = null)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder()
+                .WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3))
+                .WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            switch (type)
+            {
+                case "add":
+                case "Add":
+                    config.AntilinkIgnoredChannels.Add(chnl.Id);
+                    GuildConfig.SaveGuildConfig();
+                    embed.WithDescription($"Added <#{chnl.Id}> to the list of ignored channels for Antilink.");
+                    break;
+                case "rem":
+                case "Rem":
+                    config.AntilinkIgnoredChannels.Remove(chnl.Id);
+                    GuildConfig.SaveGuildConfig();
+                    embed.WithDescription($"Removed <#{chnl.Id}> from the list of ignored channels for Antilink.");
+                    break;
+                case "clear":
+                case "Clear":
+                    config.AntilinkIgnoredChannels.Clear();
+                    GuildConfig.SaveGuildConfig();
+                    embed.WithDescription("List of channels to be ignored by Antilink has been cleared.");
+                    break;
+                default:
+                    embed.WithDescription($"Valid types are `add`, `rem`, and `clear`. Syntax: `{config.CommandPrefix}ali {{add/rem/clear}} [channelMention]`");
+                    break;
+            }
+
+            await SendMessage(embed);
+        }
+
+        [Command("AddXp")]
+        [RequireUserPermission(GuildPermission.Administrator)]
+        public async Task AddXp(uint xp)
+        {
+            var account = UserAccounts.GetAccount(Context.User);
+            account.Xp += xp;
+            UserAccounts.SaveAccounts();
+            await ReplyAsync($"You gained {xp} XP.");
+        }
+
+        [Command("Award")]
+        [RequireUserPermission(GuildPermission.Administrator)]
+        [RequireOwner]
+        public async Task GiveUserMoney(SocketGuildUser user, int amt)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder();
+            var acc = UserAccounts.GetAccount(user);
+            acc.Money += amt;
+            UserAccounts.SaveAccounts();
+            embed.WithDescription($"{amt} added to **{user.Username}#{user.Discriminator}**'s balance.");
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+
+            await SendMessage(embed);
+        }
+
+
+        [Command("SupportCloseOwnTicket"), Alias("SCOT")]
+        [RequireUserPermission(GuildPermission.Administrator)]
+        public async Task AddBooleanToJson(bool arg)
+        {
+            var config = GuildConfig.GetGuildConfig(Context.Guild.Id) ?? GuildConfig.CreateGuildConfig(Context.Guild.Id);
+            config.CanCloseOwnTicket = arg;
+            GuildConfig.SaveGuildConfig();
+            var embed = Helpers.CreateEmbed(Context, $"{arg} set as the Support Ticket `CanCloseOwnTicket` option.");
+            await Helpers.SendMessage(Context, embed);
+        }
+
+        [Command("SupportChannelName"), Alias("SCN")]
+        [RequireUserPermission(GuildPermission.Administrator)]
+        public async Task AddChannelToConfig(string arg)
+        {
+            var config = GuildConfig.GetGuildConfig(Context.Guild.Id) ?? GuildConfig.CreateGuildConfig(Context.Guild.Id);
+            config.SupportChannelName = arg;
+            GuildConfig.SaveGuildConfig();
+            await ReplyAsync($"{arg} set as the Support channel name.");
+        }
+
+        [Command("SupportRole"), Alias("SR")]
+        [RequireUserPermission(Discord.GuildPermission.Administrator)]
+        public async Task SetRoleInConfig([Remainder]string role)
+        {
+            var config = GuildConfig.GetGuildConfig(Context.Guild.Id) ?? GuildConfig.CreateGuildConfig(Context.Guild.Id);
+            config.SupportRole = role;
+            GuildConfig.SaveGuildConfig();
+            await ReplyAsync($"`{role}` set as the role to manage tickets.");
+        }
+
+        [Command("SupportCloseTicket"), Alias("SCT", "Close"), Priority(0)] 
+        [RequireUserPermission(Discord.GuildPermission.ManageChannels)]
+        public async Task CloseTicket()
+        {
+            var config = GuildConfig.GetGuildConfig(Context.Guild.Id);
+            if (config == null) return;
+            var supportChannel = Context.Guild.Channels.FirstOrDefault(c => c.Name == $"{config.SupportChannelName}-{Context.User.Id}");
+
+            if (config.CanCloseOwnTicket == false)
+            {
+                await ReplyAsync("This server doesn't allow you to close your own ticket!");
+            }
+            else
+            {
+                if (supportChannel == null)
+                {
+                    await ReplyAsync("You don't have a support channel made.");
+                }
+                else
+                {
+                    await supportChannel.DeleteAsync();
+                    await ReplyAsync($"Your ticket - \"{supportChannel.Name}\" - has been deleted.");
+                }
+            }
+        }
+
+        [Command("SelfRoleAdd"), Alias("SRA")]
+        [RequireUserPermission(GuildPermission.Administrator)]
+        public async Task AddStringToList([Remainder]string role)
+        {
+            var config = GuildConfig.GetGuildConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder()
+                .WithDescription($"Added the {role} to the Config.")
+                .WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username))
+                .WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            config.SelfRoles.Add(role);
+            GuildConfig.SaveGuildConfig();
+            await SendMessage(embed);
+        }
+
+        [Command("SelfRoleRem"), Alias("SRR")]
+        [RequireUserPermission(GuildPermission.Administrator)]
+        public async Task RemoveStringFromList([Remainder]string role)
+        {
+            var config = GuildConfig.GetGuildConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder()
+                .WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username))
+                .WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            if (config.SelfRoles.Contains(role))
+            {
+                config.SelfRoles.Remove(role);
+                embed.WithDescription($"Removed {role} from the Self Roles list.");
+            }
+            else
+            {
+                embed.WithDescription("That role doesn't exist in your Guild Config.");
+            }
+
+            await SendMessage(embed);
+        }
+
+        [Command("SelfRoleClear"), Alias("SRC")]
+        [RequireUserPermission(GuildPermission.Administrator)]
+        public async Task ClearListFromConfig()
+        {
+            var config = GuildConfig.GetGuildConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder()
+                .WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3))
+                .WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            if (config == null)
+            {
+                embed.WithDescription("You don't have a Guild Config created.");
+            }
+            else
+            {
+                embed.WithDescription($"Cleared {config.SelfRoles.Count} roles from the self role list.");
+                config.SelfRoles.Clear();
+            }
+
+            await SendMessage(embed);
+        }
+
+
+        [Command("SupportCloseTicket"), Alias("SCT", "Close"), Priority(1), RequireUserPermission(Discord.GuildPermission.ManageChannels)]
+        public async Task CloseTicket(SocketGuildUser user)
+        {
+            var config = GuildConfig.GetGuildConfig(Context.Guild.Id);
+            if (config == null) return;
+            var supportChannel = Context.Guild.Channels.FirstOrDefault(c => c.Name == $"{config.SupportChannelName}-{user.Id}");
+
+            if (config.CanCloseOwnTicket == false)
+            {
+                await ReplyAsync("This server doesn't allow you to close your own ticket!");
+            }
+            else
+            {
+                if (supportChannel == null)
+                {
+                    await ReplyAsync("You don't have a support channel made.");
+                }
+                else
+                {
+                    await supportChannel.DeleteAsync();
+                    await ReplyAsync($"Your ticket - \"{supportChannel.Name}\" - has been deleted.");
+                }
+            }
+        }
+
+        [Command("WelcomeChannel"), Alias("Wc")]
+        [RequireUserPermission(GuildPermission.ManageGuild)]
+        public async Task SetIdIntoConfig(SocketGuildChannel chnl)
+        {
+            var config = GuildConfig.GetGuildConfig(Context.Guild.Id) ??
+                         GuildConfig.CreateGuildConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder();
+            embed.WithDescription($"Set this guild's welcome channel to #{chnl}.");
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            config.WelcomeChannel = chnl.Id;
+            GuildConfig.SaveGuildConfig();
+            await SendMessage(embed);
+        }
+
+        [Command("WelcomeMessage"), Alias("Wmsg"), Priority(0)]
+        [RequireUserPermission(GuildPermission.ManageGuild)]
+        public async Task SetTextIntoConfig([Remainder]string msg)
+        {
+            var config = GuildConfig.GetGuildConfig(Context.Guild.Id) ??
+                         GuildConfig.CreateGuildConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder();
+            embed.WithDescription($"Set this guild's welcome message to:\n\n ```{msg}```");
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            config.WelcomeMessage = msg;
+            GuildConfig.SaveGuildConfig();
+            await SendMessage(embed);
+
+            if (config.WelcomeChannel != 0)
+            {
+                var a = config.WelcomeMessage.Replace("{UserMention}", Context.User.Mention);
+                var b = a.Replace("{ServerName}", Context.Guild.Name);
+                var c = b.Replace("{UserName}", Context.User.Username);
+                var d = c.Replace("{OwnerMention}", Context.Guild.Owner.Mention);
+                var e = d.Replace("{UserTag}", Context.User.DiscriminatorValue.ToString());
+
+                var channel = Context.Guild.GetTextChannel(config.WelcomeChannel);
+                var embed2 = new EmbedBuilder();
+                embed2.WithDescription(e);
+                embed2.WithColor(new Color(config.WelcomeColour1, config.WelcomeColour2, config.WelcomeColour3));
+                embed2.WithFooter($"Guild Owner: {Context.Guild.Owner.Username}#{Context.Guild.Owner.Discriminator}");
+                embed2.WithThumbnailUrl(Context.Guild.IconUrl);
+                await channel.SendMessageAsync("", false, embed2);
+            }
+        }
+
+        [Command("WelcomeMessage"), Alias("Wmsg"), Priority(1)]
+        [RequireUserPermission(GuildPermission.ManageGuild)]
+        public async Task SendWMSGToUser()
+        {
+            var config = GuildConfig.GetGuildConfig(Context.Guild.Id) ??
+                         GuildConfig.CreateGuildConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder();
+            embed.WithDescription($"The welcome message for this server is: `{config.WelcomeMessage}`");
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            await SendMessage(embed);
+        }
+
+        [Command("LeavingMessage"), Alias("Lmsg")]
+        [RequireUserPermission(GuildPermission.ManageGuild)]
+        public async Task SetTextIntoConfigLol([Remainder]string msg)
+        {
+            var config = GuildConfig.GetGuildConfig(Context.Guild.Id) ??
+                         GuildConfig.CreateGuildConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder();
+            embed.WithDescription($"Set this guild's leaving message to:\n\n ```{msg}```\n\nSending a test welcome message to <#{config.WelcomeChannel}>");
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            config.LeavingMessage = msg;
+            GuildConfig.SaveGuildConfig();
+            await SendMessage(embed);
+
+            if (config.WelcomeChannel != 0)
+            {
+                var a = config.WelcomeMessage.Replace("{UserMention}", Context.User.Mention);
+                var b = a.Replace("{ServerName}", Context.Guild.Name);
+                var c = b.Replace("{UserName}", Context.User.Username);
+                var d = c.Replace("{OwnerMention}", Context.Guild.Owner.Mention);
+                var e = d.Replace("{UserTag}", Context.User.DiscriminatorValue.ToString());
+
+                var channel = Context.Guild.GetTextChannel(config.WelcomeChannel);
+                var embed2 = new EmbedBuilder();
+                embed2.WithDescription(e);
+                embed2.WithColor(new Color(config.WelcomeColour1, config.WelcomeColour2, config.WelcomeColour3));
+                embed2.WithFooter($"Guild Owner: {Context.Guild.Owner.Username}#{Context.Guild.Owner.Discriminator}");
+                embed2.WithThumbnailUrl(Context.Guild.IconUrl);
+                await channel.SendMessageAsync("", false, embed2);
+            }
+        }
+
+        [Command("WelcomeColour"), Alias("Wcl", "WelcomeColor")]
+        [RequireUserPermission(GuildPermission.ManageGuild)]
+        public async Task SetIntIntoConfig(int arg1, int arg2, int arg3)
+        {
+            var config = GuildConfig.GetGuildConfig(Context.Guild.Id) ??
+                         GuildConfig.CreateGuildConfig(Context.Guild.Id);
+            config.WelcomeColour1 = arg1;
+            config.WelcomeColour2 = arg2;
+            config.WelcomeColour3 = arg3;
+            GuildConfig.SaveGuildConfig();
+            var embed = new EmbedBuilder();
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            embed.WithDescription(Bot.Utilities.GetFormattedLocaleMsg("WelcomeColourText", arg1, arg2, arg3));
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+
+            await SendMessage(embed);
+        }
+
+        [Command("Levels"), Alias("L")]
+        [RequireUserPermission(GuildPermission.Administrator)]
+        public async Task Leveling(bool arg)
+        {
+            var config = GuildConfig.GetGuildConfig(Context.Guild.Id) ?? GuildConfig.CreateGuildConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder();
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            embed.WithDescription(arg ? "Enabled leveling for this server." : "Disabled leveling for this server.");
+            config.Leveling = arg;
+            GuildConfig.SaveGuildConfig();
+
+            await SendMessage(embed);
+        }
+
+        [Command("ServerPrefix")]
+        [RequireUserPermission(GuildPermission.Administrator)]
+        public async Task SetGuildPrefix([Remainder]string prefix)
+        {
+            var config = GuildConfig.GetGuildConfig(Context.Guild.Id) ?? GuildConfig.CreateGuildConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder();
+            embed.WithDescription("Done.");
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            config.CommandPrefix = prefix;
+            GuildConfig.SaveGuildConfig();
+            await SendMessage(embed);
+        }
+
+        [Command("AutoRole")]
+        [RequireUserPermission(GuildPermission.Administrator)]
+        public async Task AutoRoleRoleAdd([Remainder]string arg = "")
+        {
+
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            config.Autorole = arg;
+            GuildConfig.SaveGuildConfig();
+
+            var embed = new EmbedBuilder();
+            embed.WithDescription(Bot.Utilities.GetFormattedLocaleMsg("AutoroleCommandText", arg));
+            embed.WithThumbnailUrl(Context.Guild.IconUrl);
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+
+            await SendMessage(embed);
+
+
+        }
+        
+        public async Task SendMessage(Embed embed, string message = "", bool isTTS = false)
+        {
+            await ReplyAsync(message, isTTS, embed);
+        }
+    }
+}
diff --git a/SIVA/Core/Modules/Management/Moderation.cs b/SIVA/Core/Modules/Management/Moderation.cs
new file mode 100644
index 0000000..df34c03
--- /dev/null
+++ b/SIVA/Core/Modules/Management/Moderation.cs
@@ -0,0 +1,218 @@
+﻿using Discord.Commands;
+using Discord;
+using System.Threading.Tasks;
+using Discord.WebSocket;
+using System.Linq;
+using SIVA.Core.JsonFiles;
+using System.Collections.Generic;
+
+namespace SIVA.Core.Modules.Management
+{
+    public class Moderation : ModuleBase<SocketCommandContext>
+    {
+        public string Count = "";
+
+        [Command("Ban")]
+        [RequireUserPermission(GuildPermission.BanMembers)]
+        public async Task BanUser(SocketGuildUser user, [Remainder]string reason = "")
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            await Context.Guild.AddBanAsync(user, 7, reason);
+            var embed = new EmbedBuilder();
+            embed.WithDescription(Bot.Utilities.GetFormattedLocaleMsg("BanText", user.Mention, Context.User.Mention));
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            await ReplyAsync("", false, embed);
+
+        }
+
+        [Command("Softban"), Alias("Sb")]
+        [RequireUserPermission(GuildPermission.BanMembers)]
+        public async Task BanThenUnbanUser(SocketGuildUser user)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder();
+            embed.WithDescription($"{Context.User.Mention} softbanned <@{user.Id}>, deleting the last 7 days of messages from that user.");
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            await ReplyAsync("", false, embed);
+            await Context.Guild.AddBanAsync(user, 7);
+            await Context.Guild.RemoveBanAsync(user);
+
+        }
+
+        [Command("IdBan")]
+        [RequireUserPermission(GuildPermission.BanMembers)]
+        public async Task BanUserById(ulong userid, [Remainder]string reason = "")
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            if (reason == "")
+            {
+                reason = $"Banned by {Context.User.Username}#{Context.User.Discriminator}";
+            }
+            await Context.Guild.AddBanAsync(userid, 7, reason);
+            var embed = new EmbedBuilder();
+            embed.WithDescription(Bot.Utilities.GetFormattedLocaleMsg("BanText", $"<@{userid}>", $"<@{Context.User.Id}>"));
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("Rename")]
+        [RequireUserPermission(GuildPermission.ManageNicknames)]
+        public async Task SetUsersNickname(SocketGuildUser user, [Remainder]string nick)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            await user.ModifyAsync(x => x.Nickname = nick);
+            var embed = new EmbedBuilder();
+            embed.WithDescription($"Set <@{user.Id}>'s nickname on this server to **{nick}**!");
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("Kick")]
+        [RequireUserPermission(GuildPermission.KickMembers)]
+        public async Task KickUser(SocketGuildUser user, [Remainder]string reason = "")
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            await user.KickAsync(reason);
+            var embed = new EmbedBuilder();
+            embed.WithDescription(Bot.Utilities.GetFormattedLocaleMsg("KickUserMsg", user.Mention, Context.User.Mention));
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            await ReplyAsync("", false, embed);
+
+        }
+
+
+        [Command("AddRole"), Alias("AR")]
+        [RequireUserPermission(GuildPermission.ManageRoles)]
+        [RequireBotPermission(GuildPermission.ManageRoles)]
+        public async Task GiveUserSpecifiedRole(SocketGuildUser user, [Remainder]string role)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var targetRole = user.Guild.Roles.FirstOrDefault(r => r.Name == role);
+
+            var embed = new EmbedBuilder();
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            embed.WithDescription(Bot.Utilities.GetFormattedLocaleMsg("AddRoleCommandText", role, user.Username + "#" + user.Discriminator));
+
+            await user.AddRoleAsync(targetRole);
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("RemRole"), Alias("RR")]
+        [RequireUserPermission(GuildPermission.ManageRoles)]
+        [RequireBotPermission(GuildPermission.ManageRoles)]
+        public async Task TakeAwaySpecifiedRole(SocketGuildUser user, [Remainder]string role)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var targetRole = user.Guild.Roles.FirstOrDefault(r => r.Name == role);
+
+            var embed = new EmbedBuilder();
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            embed.WithDescription(Bot.Utilities.GetFormattedLocaleMsg("RemRoleCommandText", role, user.Username + "#" + user.Discriminator));
+
+            await user.RemoveRoleAsync(targetRole);
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("Purge")]
+        [RequireUserPermission(ChannelPermission.ManageMessages)]
+        [RequireBotPermission(ChannelPermission.ManageMessages)]
+        public async Task PurgeMessages(int amount)
+        {
+            if (amount < 1)
+            {
+                await ReplyAsync("You cannot delete less than 1 message.");
+            }
+            else
+            {
+                var messages = await Context.Channel.GetMessagesAsync(amount).Flatten();
+                await Context.Channel.DeleteMessagesAsync(messages);
+            }
+        }
+
+        /*[Command("Warn")]
+        [RequireUserPermission(GuildPermission.KickMembers)]
+        public async Task WarnUser(SocketGuildUser user, [Remainder]string reason)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder();
+
+            embed.WithDescription(Bot.Utilities.GetFormattedLocaleMsg("WarnCommandText", user.Mention, reason));
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            var ua = UserAccounts.GetAccount(user);
+            ua.Warns.Add(Context.Guild.Id, reason);
+            ua.WarnCount = (uint)ua.Warns.Count;
+            UserAccounts.SaveAccounts();
+            await ReplyAsync("", false, embed);
+
+        }
+
+        [Command("ClearWarns"), Alias("Cw")]
+        [RequireUserPermission(GuildPermission.Administrator)]
+        public async Task ClearUsersWarns(SocketGuildUser user)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var ua = UserAccounts.GetAccount(user);
+            var embed = new EmbedBuilder();
+            embed.WithDescription($"Cleared the warn(s) for {user.Mention}");
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            ua.WarnCount = (uint)ua.Warns.Count();
+            foreach (KeyValuePair<ulong, string> warns in ua.Warns)
+            {
+                if (warns.Key == config.ServerId)
+                {
+                    ua.Warns.Remove(warns.Key);
+                }
+            }
+            UserAccounts.SaveAccounts();
+            
+            await ReplyAsync("", false, embed);
+
+        }
+
+        [Command("Warns"), Priority(0)]
+        public async Task WarnsAmountForGivenUser()
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder();
+            var ua = UserAccounts.GetAccount(Context.User);
+            Count = ua.WarnCount == 1 ? "WarnsSingulText" : "WarnsPluralText";
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            embed.WithDescription($"{Context.User.Mention} has {ua.WarnCount} warns and their most recent warn is `{ua.Warns.Last().Value}`");
+            await ReplyAsync("", false, embed);
+
+        }
+
+        [Command("Warns"), Priority(1)]
+        public async Task WarnsAmountForGivenUser(SocketGuildUser user)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder();
+            var ua = UserAccounts.GetAccount(user);
+            if (ua.WarnCount == 1)
+            {
+                Count = "WarnsSingulText";
+            }
+            else
+            {
+                Count = "WarnsPluralText";
+            }
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            embed.WithDescription($"{user.Mention} has {ua.WarnCount} warns and their most recent warn is `{ua.Warns.Last().Value}`");
+
+            await ReplyAsync("", false, embed);
+
+        }*/
+    }
+}
diff --git a/SIVA/Core/Modules/Management/Owner.cs b/SIVA/Core/Modules/Management/Owner.cs
new file mode 100644
index 0000000..052116b
--- /dev/null
+++ b/SIVA/Core/Modules/Management/Owner.cs
@@ -0,0 +1,164 @@
+﻿using System.Threading.Tasks;
+using Discord;
+using Discord.Commands;
+using Discord.WebSocket;
+using SIVA.Core.Bot;
+using SIVA.Core.JsonFiles;
+using Microsoft.CodeAnalysis.CSharp.Scripting;
+using Microsoft.CodeAnalysis.Scripting;
+using Discord.Net;
+using System;
+using Microsoft.CodeAnalysis.Operations;
+
+namespace SIVA.Core.Modules.Management
+{
+    public class Owner : ModuleBase<SocketCommandContext>
+    {
+
+        [Command("Shutdown")]
+        [RequireOwner]
+        public async Task Shutdown()
+        {
+            var client = Program._client;
+            var embed = new EmbedBuilder()
+                .WithDescription(Bot.Utilities.GetFormattedLocaleMsg("LoggingOutMsg", Context.User.Mention))
+                .WithColor(Config.bot.DefaultEmbedColour)
+                .WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            await ReplyAsync("", false, embed);
+            await client.LogoutAsync();
+            await client.StopAsync();
+        }
+
+        [Command("NotifyBotUsers"), Alias("Nbu")]
+        [RequireOwner]
+        public async Task NotifyPeopleWhoUseBot([Remainder]string message)
+        {
+            var client = Program._client;
+            var embed = new EmbedBuilder()
+                .WithDescription(message)
+                .WithTitle("Message from Greem (Bot Creator)")
+                .WithColor(Config.bot.DefaultEmbedColour);
+
+            foreach (SocketGuild server in client.Guilds)
+            {
+                var dm = await server.Owner.GetOrCreateDMChannelAsync();
+                
+                try {
+                    await dm.SendMessageAsync("", false, embed);
+                } catch (RateLimitedException e)
+                {
+                    Console.WriteLine($"ratelimited. {e.Message}");
+                }
+            }
+
+            await ReplyAsync($"Successfully sent `{message}` to all server owners.");
+        }
+
+        [Command("VerifyGuild"), Alias("Verify")]
+        [RequireOwner]
+        public async Task VerifyGuildById(ulong guildId = 0)
+        {
+            var id = guildId;
+            if (id == 0) id = Context.Guild.Id;
+            var config = GuildConfig.GetGuildConfig(id);
+            config.VerifiedGuild = true;
+            var embed = new EmbedBuilder()
+                .WithDescription("Successfully verified this server.")
+                .WithColor(Config.bot.DefaultEmbedColour)
+                .WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("Eval")]
+        [RequireOwner]
+        public async Task EvaluateCSharpCode([Remainder]string code)
+        {
+            var result = await CSharpScript.EvaluateAsync(code, ScriptOptions.Default.AddImports("System", "System.IO", "System.Collections.Generic", "System.Threading.Tasks", "System.Threading"));
+            var embed = new EmbedBuilder()
+                .WithDescription($"Input: \n```cs\n{code}```\n\nOutput: `{result}`")
+                .WithColor(Config.bot.DefaultEmbedColour);
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("Stream")]
+        [RequireOwner]
+        public async Task SetBotStream(string streamer, [Remainder]string streamName)
+        {
+            await Program._client.SetGameAsync(streamName, $"https://twitch.tv/{streamer}", StreamType.Twitch);
+            var embed = Helpers.CreateEmbed(Context, $"Set the stream name to **{streamName}**, and set the streamer to <https://twitch.tv/{streamer}>!");
+            await Helpers.SendMessage(Context, embed);
+        }
+
+
+        [Command("Game")]
+        [RequireOwner]
+        public async Task SetBotGame([Remainder] string game)
+        {
+            var client = Program._client;
+
+            var embed = new EmbedBuilder();
+            embed.WithDescription($"Set the bot's game to {game}");
+            embed.WithColor(Bot.Config.bot.DefaultEmbedColour);
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            await client.SetGameAsync(game);
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("Status")]
+        [RequireOwner]
+        public async Task SetBotStatus(string status)
+        {
+            var embed = new EmbedBuilder();
+            embed.WithDescription($"Set the status to {status}.");
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithColor(Bot.Config.bot.DefaultEmbedColour);
+
+            var client = Program._client;
+
+            switch (status)
+            {
+                case "dnd":
+                    await client.SetStatusAsync(UserStatus.DoNotDisturb);
+                    break;
+                case "idle":
+                    await client.SetStatusAsync(UserStatus.Idle);
+                    break;
+                case "online":
+                    await client.SetStatusAsync(UserStatus.Online);
+                    break;
+                case "offline":
+                    await client.SetStatusAsync(UserStatus.Invisible);
+                    break;
+            }
+
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("LeaveServer")]
+        [RequireOwner]
+        public async Task LeaveServer()
+        {
+            var embed = new EmbedBuilder();
+            embed.WithDescription(Bot.Utilities.GetLocaleMsg("BotLeftServer"));
+            embed.WithColor(Bot.Config.bot.DefaultEmbedColour);
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            await ReplyAsync("", false, embed);
+            await Context.Guild.LeaveAsync();
+        }
+
+        [Command("ServerCount"), Alias("Sc")]
+        [RequireOwner]
+        public async Task ServerCountStream()
+        {
+            var client = Program._client;
+            var guilds = Context.Client.Guilds.Count;
+            var embed = new EmbedBuilder();
+            embed.WithDescription("Done.");
+            embed.WithColor(Bot.Config.bot.DefaultEmbedColour);
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            await ReplyAsync("", false, embed);
+            await client.SetGameAsync($"in {(Context.Client as DiscordSocketClient).Guilds.Count} servers!", $"https://twitch.tv/{Config.bot.TwitchStreamer}", StreamType.Twitch);
+
+        }
+    }
+}
diff --git a/SIVA/Core/Modules/Utilities/Patreon.cs b/SIVA/Core/Modules/Utilities/Patreon.cs
new file mode 100644
index 0000000..a6ccd70
--- /dev/null
+++ b/SIVA/Core/Modules/Utilities/Patreon.cs
@@ -0,0 +1,48 @@
+﻿using System.Threading.Tasks;
+using Discord;
+using Discord.Commands;
+using SIVA.Core.Bot;
+using SIVA.Core.JsonFiles;
+
+namespace SIVA.Core.Modules.Utilities
+{
+    public class Patreon : ModuleBase<SocketCommandContext>
+    {
+        string patreonLink = "https://patreon.com/_SIVA";
+        [Command("Donate")]
+        public async Task SendDonateEmbed()
+        {
+            var embed = new EmbedBuilder()
+                .WithDescription($"Donate to my Patreon!\n\n{patreonLink}")
+                .WithColor(Config.bot.DefaultEmbedColour)
+                .WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("VerifyCheck"), Alias("Vc")]
+        public async Task CheckIfServerIsVerified()
+        {
+            var config = GuildConfig.GetGuildConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder()
+                .WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3))
+                .WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithDescription(config.VerifiedGuild
+                ? "This server is verified! Greem thanks you for your generosity. (Unless this is a server Greem owns)"
+                : $"This server isn't verified. Donate on my Patreon to unlock cool perks! (Plus you can brag to your friends about it.)\n\n{patreonLink}");
+
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("Donators")]
+        public async Task ListDonatorMentions()
+        {
+            var config = GuildConfig.GetGuildConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder()
+                .WithDescription($"Nobody has donated yet! Maybe you'll be the first? Use `{config.CommandPrefix}donate` to get to there.")
+                .WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3))
+                .WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+
+            await ReplyAsync("", false, embed);
+        }
+    }
+}
diff --git a/SIVA/Core/Modules/Utilities/Stats.cs b/SIVA/Core/Modules/Utilities/Stats.cs
new file mode 100644
index 0000000..876d722
--- /dev/null
+++ b/SIVA/Core/Modules/Utilities/Stats.cs
@@ -0,0 +1,50 @@
+﻿using OverwatchAPI;
+using Discord;
+using Discord.Commands;
+using System.Threading.Tasks;
+using FortniteApi;
+using SIVA.Core.Bot;
+using SIVA.Core.JsonFiles;
+
+namespace SIVA.Core.Modules.Utilities
+{
+    public class Stats : ModuleBase<SocketCommandContext>
+    {
+        [Command("OverwatchPlayer"), Alias("OwP")]
+        public async Task OverwatchPlayer(string gamer)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var owClient = new OverwatchClient();
+            Player player = await owClient.GetPlayerAsync(gamer);
+            var embed = new EmbedBuilder();
+            embed.WithTitle($"{gamer}'s Overwatch \"stats\"!");
+            embed.AddField("Level", player.PlayerLevel);
+            embed.AddField("Platform", player.Platform);
+            embed.AddField("Profile URL", player.ProfileUrl);
+            embed.AddField("Achievements", player.Achievements.Count);
+            embed.WithThumbnailUrl(player.CompetitiveRankImageUrl);
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("Fortnite"), Alias("FN")]
+        public async Task Fortnite(FortniteApi.Data.Platform platform, [Remainder]string name)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var fortnite = new FortniteClient("b226f694-eb4a-4e09-99d2-0639bf57ea90");
+            var profile = await fortnite.FindPlayerAsync(platform, name);
+            var embed = new EmbedBuilder();
+            embed.WithTitle($"{name}'s Fortnite Info - {platform}");
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.AddField("Account ID", profile.AccountId);
+            embed.AddField("Platform", profile.PlatformName);
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            embed.WithThumbnailUrl("https://cdn.atr.cloud/monthly_2017_10/FortniteClient-Win64-Shipping_123.ico_256x256.png.9db57869789ecc4d9c5f72c5a9ba9e30.thumb.png.d8d082ccd47b246fc3773e854b1b2ead.png");
+
+            await ReplyAsync("", false, embed);
+        }
+
+    }
+}
diff --git a/SIVA/Core/Modules/Utilities/Utils.cs b/SIVA/Core/Modules/Utilities/Utils.cs
new file mode 100644
index 0000000..aea3a54
--- /dev/null
+++ b/SIVA/Core/Modules/Utilities/Utils.cs
@@ -0,0 +1,546 @@
+﻿using Discord;
+using Discord.Commands;
+using Discord.WebSocket;
+using SIVA.Core.Bot;
+using System.Threading.Tasks;
+using System;
+using System.Linq;
+using System.Threading;
+using SIVA.Core.JsonFiles;
+using DiscordBotsList.Api;
+
+namespace SIVA.Core.Modules.Utilities
+{
+    public class Utils : ModuleBase<SocketCommandContext>
+    {
+
+
+        [Command("Avatar")]
+        public async Task GetUsersAvatar(SocketGuildUser s)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder()
+                .WithImageUrl(s.GetAvatarUrl())
+                .WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3))
+                .WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username))
+                .WithDescription($"**{s.Username}#{s.DiscriminatorValue}**'s Avatar");
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("UserInfo"), Alias("uinfo", "useri", "ui")]
+        public async Task UserInformationCommand(SocketGuildUser user = null)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder();
+            if (user != null)
+            {
+
+                embed.AddField("Username", $"{user.Username}#{user.Discriminator}");
+                embed.AddField("User ID", user.Id);
+                if (user.Game != null) { embed.AddField("Game", user.Game); } else { embed.AddField("Game", "Nothing"); }
+                embed.AddField("Status", user.Status);
+                embed.AddField("Account Created", user.CreatedAt.UtcDateTime);
+                embed.WithThumbnailUrl(user.GetAvatarUrl());
+                embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+                embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+                embed.WithTitle("User Information");
+                embed.AddField("Is Bot", user.IsBot);
+            }
+            else
+            {
+                embed.AddField("Username", $"{Context.User.Username}#{Context.User.Discriminator}");
+                embed.AddField("User ID", Context.User.Id);
+                if (Context.User.Game != null) { embed.AddField("Game", Context.User.Game); } else { embed.AddField("Game", "Nothing"); }
+                embed.AddField("Status", Context.User.Status);
+                embed.AddField("Account Created", Context.User.CreatedAt.UtcDateTime);
+                embed.WithThumbnailUrl(Context.User.GetAvatarUrl());
+                embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+                embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+                embed.WithTitle("User Information");
+                embed.AddField("Is Bot", Context.User.IsBot);
+            }
+            
+
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("Feedback"), Alias("Fb")]
+        public async Task SendFeedbackToDev([Remainder]string feedback)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder();
+            embed.WithDescription(Bot.Utilities.GetFormattedLocaleMsg("FeedbackCommandText", feedback));
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            embed.WithTitle("Feedback to Greem");
+            await ReplyAsync("", false, embed);
+            var feedbackEmbed = new EmbedBuilder()
+                .WithDescription(feedback)
+                .WithTitle($"Feedback from {Context.User.Username}#{Context.User.DiscriminatorValue}")
+                .WithColor(Config.bot.DefaultEmbedColour);
+
+
+            var channel = Program._client.GetGuild(405806471578648588).GetTextChannel(415182876326232064);
+            await channel.SendMessageAsync("", false, feedbackEmbed);
+        }
+
+        [Command("Calculator"), Alias("Calc")]
+        public async Task Calculate(string oper, int val1, int val2 = 0)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder();
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            embed.WithTitle("Calculator");
+
+            int result;
+            double result2;
+
+            switch (oper)
+            {
+                case "add":
+                    result = val1 + val2;
+                    embed.WithDescription($"The answer is `{result}`");
+                    break;
+                case "sub":
+                    result = val1 - val2;
+                    embed.WithDescription($"The answer is `{result}`");
+                    break;
+                case "mult":
+                    result2 = Math.BigMul(val1, val2);
+                    embed.WithDescription($"The answer is `{result2}`");
+                    break;
+                case "div":
+                    Math.DivRem(val1, val2, out var b);
+                    embed.WithDescription($"The answer is `{b}`");
+                    break;
+                case "sqrt":
+                    result2 = Math.Sqrt(val1);
+                    embed.WithDescription($"The answer is `{result2}`");
+                    break;
+                case "power":
+                    result2 = Math.Pow(val1, val2);
+                    embed.WithDescription($"The answer is `{result2}`");
+                    break;
+                default:
+                    embed.WithDescription("You didn't specify a valid operation. Valid operations are `add`, `sub`, `mult`, `div`, `power`, and `sqrt`.");
+                    break;
+
+                
+            }
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("YouTube"), Alias("Yt")]
+        public async Task SearchYouTube([Remainder]string query)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder();
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            embed.WithThumbnailUrl("https://www.freepnglogos.com/uploads/youtube-logo-hd-8.png");
+
+            var url = "https://youtube.com/results?search_query=";
+            var newQuery = query.Replace(' ', '+');
+            embed.WithDescription(url + newQuery);
+
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("ServerInfo"), Alias("sinfo", "serveri", "si")]
+        public async Task ServerInformationCommand()
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder();
+            embed.WithTitle("Server Information");
+            embed.AddField("Name", Context.Guild.Name);
+            embed.AddField("Created", Context.Guild.CreatedAt.UtcDateTime);
+            embed.AddField("Users", Context.Guild.Users.Count);
+            embed.AddField("Text Channels", Context.Guild.TextChannels.Count);
+            embed.AddField("Voice Channels", Context.Guild.VoiceChannels.Count);
+            embed.AddField("Region", Context.Guild.VoiceRegionId);
+            embed.WithThumbnailUrl(Context.Guild.IconUrl);
+            embed.AddField("Roles", Context.Guild.Roles.Count);
+            embed.AddField("Donator Guild", config.VerifiedGuild);
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("Iam")]
+        public async Task GiveYourselfRole([Remainder]string role)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var user = Context.User as SocketGuildUser;
+            var embed = new EmbedBuilder()
+                .WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3))
+                .WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            if (config == null)
+            {
+                embed.WithDescription("This server doesn't have any self roles set.");
+            }
+            else
+            {
+                if (config.SelfRoles.Contains(role))
+                {
+                    embed.WithDescription($"Gave you the **{role}** role.");
+                    var r = Context.Guild.Roles.FirstOrDefault(x => x.Name == role);
+                    await user.AddRoleAsync(r);
+                }
+                else
+                {
+                    embed.WithDescription("That role isn't in the self roles list for this server. Remember that this command is cAsE sEnSiTiVe!");
+                }
+            }
+
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("Iamnot"), Alias("Iamn")]
+        public async Task TakeAwayRole([Remainder]string role)
+        {
+            var config = GuildConfig.GetGuildConfig(Context.Guild.Id);
+            var user = Context.User as SocketGuildUser;
+            var embed = new EmbedBuilder()
+                .WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3))
+                .WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            if (config == null)
+            {
+                embed.WithDescription("This server doesn't have any self roles set.");
+            }
+            else
+            {
+                if (config.SelfRoles.Contains(role))
+                {
+                    embed.WithDescription($"Removed your **{role}** role.");
+                    var r = Context.Guild.Roles.FirstOrDefault(x => x.Name == role);
+                    await user.RemoveRoleAsync(r);
+                }
+                else
+                {
+                    embed.WithDescription("That role isn't in the self roles list for this server. Remember that this command is cAsE sEnSiTiVe!");
+                }
+            }
+
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("CustomCommandList"), Alias("Ccl")]
+        public async Task GetCustomCommandsForServer()
+        {
+            var config = GuildConfig.GetGuildConfig(Context.Guild.Id);
+            string commandList= "";
+            foreach (string value in config.CustomCommands.Keys)
+            {
+                commandList += $"**{value}**\n";
+            }
+            var embed = new EmbedBuilder()
+                .WithDescription(commandList)
+                .WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3))
+                .WithTitle($"Custom Commands available for {Context.Guild.Name}")
+                .WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("SelfRoleList"), Alias("Srl")]
+        public async Task GetSelfRoleListForServer()
+        {
+            var config = GuildConfig.GetGuildConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder()
+                .WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3))
+                .WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            if (config == null)
+            {
+                embed.WithDescription("This server doesn't have any self-assignable roles.");
+            }
+            else
+            {
+                config.SelfRoles.Sort();
+                string roles = "\n";
+                foreach (var role in config.SelfRoles)
+                {
+                    roles += $"**{role}**\n";
+                }
+
+                embed.WithTitle("Roles you can self-assign: ");
+                embed.WithDescription(roles);
+            }
+
+            await ReplyAsync("", false, embed);
+
+
+        }
+
+
+        [Command("Poll")]
+        [RequireUserPermission(GuildPermission.ManageMessages)]
+        public async Task ReactionPoll([Remainder]string pollBody)
+        {
+            var choices = pollBody.Split(';');
+            var numbers = choices.Length-1;
+
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder()
+                .WithTitle(choices[0])
+                .WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3))
+                .WithAuthor(Context.User)
+                .WithThumbnailUrl("http://survation.com/wp-content/uploads/2016/09/polleverywherelogo.png");
+
+            switch (numbers)
+            {
+                case 1:
+                    embed.WithDescription($"{new Emoji("🇦")} {choices[1]}\n\n" +
+                                          "Click one of the letters below to vote.");
+                    break;
+                case 2:
+                    embed.WithDescription($"{new Emoji("🇦")} {choices[1]}\n" +
+                                          $"{new Emoji("🇧")} {choices[2]}\n\n" +
+                                          "Click one of the letters below to vote.");
+                    break;
+                case 3:
+                    embed.WithDescription($"{new Emoji("🇦")} {choices[1]}\n" +
+                                          $"{new Emoji("🇧")} {choices[2]}\n" +
+                                          $"{new Emoji("🇨")} {choices[3]}\n\n" +
+                                          "Click one of the letters below to vote.");
+                    break;
+
+                case 4:
+                    embed.WithDescription($"{new Emoji("🇦")} {choices[1]}\n" +
+                                          $"{new Emoji("🇧")} {choices[2]}\n" +
+                                          $"{new Emoji("🇨")} {choices[3]}\n" +
+                                          $"{new Emoji("🇩")} {choices[4]}\n\n" +
+                                          "Click one of the letters below to vote.");
+                    break;
+                case 5:
+                    embed.WithDescription($"{new Emoji("🇦")} {choices[1]}\n" +
+                                          $"{new Emoji("🇧")} {choices[2]}\n" +
+                                          $"{new Emoji("🇨")} {choices[3]}\n" +
+                                          $"{new Emoji("🇩")} {choices[4]}\n" +
+                                          $"{new Emoji("🇪")} {choices[5]}\n\n" +
+                                          "Click one of the letters below to vote.");
+                    break;
+                case 6:
+                    embed.WithDescription($"{new Emoji("🇦")} {choices[1]}\n" +
+                                          $"{new Emoji("🇧")} {choices[2]}\n" +
+                                          $"{new Emoji("🇨")} {choices[3]}\n" +
+                                          $"{new Emoji("🇩")} {choices[4]}\n" +
+                                          $"{new Emoji("🇪")} {choices[5]}\n" +
+                                          $"{new Emoji("🇫")} {choices[6]}\n\n" +
+                                          "Click one of the letters below to vote.");
+                    break;
+                case 7:
+                    embed.WithDescription($"{new Emoji("🇦")} {choices[1]}\n" +
+                                          $"{new Emoji("🇧")} {choices[2]}\n" +
+                                          $"{new Emoji("🇨")} {choices[3]}\n" +
+                                          $"{new Emoji("🇩")} {choices[4]}\n" +
+                                          $"{new Emoji("🇪")} {choices[5]}\n" +
+                                          $"{new Emoji("🇫")} {choices[6]}\n" +
+                                          $"{new Emoji("🇬")} {choices[7]}\n\n" +
+                                          "Click one of the letters below to vote.");
+                    break;
+                case 8:
+                    embed.WithDescription($"{new Emoji("🇦")} {choices[1]}\n" +
+                                          $"{new Emoji("🇧")} {choices[2]}\n" +
+                                          $"{new Emoji("🇨")} {choices[3]}\n" +
+                                          $"{new Emoji("🇩")} {choices[4]}\n" +
+                                          $"{new Emoji("🇪")} {choices[5]}\n" +
+                                          $"{new Emoji("🇫")} {choices[6]}\n" +
+                                          $"{new Emoji("🇬")} {choices[7]}\n" +
+                                          $"{new Emoji("🇭")} {choices[8]}\n\n" +
+                                          "Click one of the letters below to vote.");
+                    break;
+
+                default:
+                    embed.WithDescription("No options specified.");
+                    break;
+
+
+            }
+
+            if (choices.Length > 8)
+            {
+                embed.WithDescription("You cannot have more than 8 options.");
+                await ReplyAsync("", false, embed);
+                return;
+            }
+
+            var msg = await ReplyAsync("", false, embed);
+            await Context.Message.DeleteAsync();
+
+            switch (numbers)
+            {
+                case 1:
+                    await msg.AddReactionAsync(new Emoji("🇦"));
+                    break;
+                case 2:
+                    await msg.AddReactionAsync(new Emoji("🇦"));
+                    Thread.Sleep(500);
+                    await msg.AddReactionAsync(new Emoji("🇧"));
+                    break;
+                case 3:
+                    await msg.AddReactionAsync(new Emoji("🇦"));
+                    Thread.Sleep(500);
+                    await msg.AddReactionAsync(new Emoji("🇧"));
+                    Thread.Sleep(500);
+                    await msg.AddReactionAsync(new Emoji("🇨"));
+                    break;
+                case 4:
+                    await msg.AddReactionAsync(new Emoji("🇦"));
+                    Thread.Sleep(500);
+                    await msg.AddReactionAsync(new Emoji("🇧"));
+                    Thread.Sleep(500);
+                    await msg.AddReactionAsync(new Emoji("🇨"));
+                    Thread.Sleep(500);
+                    await msg.AddReactionAsync(new Emoji("🇩"));
+                    break;
+                case 5:
+                    await msg.AddReactionAsync(new Emoji("🇦"));
+                    Thread.Sleep(500);
+                    await msg.AddReactionAsync(new Emoji("🇧"));
+                    Thread.Sleep(500);
+                    await msg.AddReactionAsync(new Emoji("🇨"));
+                    Thread.Sleep(500);
+                    await msg.AddReactionAsync(new Emoji("🇩"));
+                    Thread.Sleep(500);
+                    await msg.AddReactionAsync(new Emoji("🇪"));
+                    break;
+                case 6:
+                    await msg.AddReactionAsync(new Emoji("🇦"));
+                    Thread.Sleep(500);
+                    await msg.AddReactionAsync(new Emoji("🇧"));
+                    Thread.Sleep(500);
+                    await msg.AddReactionAsync(new Emoji("🇨"));
+                    Thread.Sleep(500);
+                    await msg.AddReactionAsync(new Emoji("🇪"));
+                    Thread.Sleep(500);
+                    await msg.AddReactionAsync(new Emoji("🇫"));
+                    Thread.Sleep(500);
+                    await msg.AddReactionAsync(new Emoji("🇦"));
+                    break;
+                case 7:
+                    await msg.AddReactionAsync(new Emoji("🇦"));
+                    Thread.Sleep(500);
+                    await msg.AddReactionAsync(new Emoji("🇧"));
+                    Thread.Sleep(500);
+                    await msg.AddReactionAsync(new Emoji("🇨"));
+                    Thread.Sleep(500);
+                    await msg.AddReactionAsync(new Emoji("🇩"));
+                    Thread.Sleep(500);
+                    await msg.AddReactionAsync(new Emoji("🇪"));
+                    Thread.Sleep(500);
+                    await msg.AddReactionAsync(new Emoji("🇫"));
+                    Thread.Sleep(500);
+                    await msg.AddReactionAsync(new Emoji("🇬"));
+                    break;
+                case 8:
+                    await msg.AddReactionAsync(new Emoji("🇦"));
+                    Thread.Sleep(500);
+                    await msg.AddReactionAsync(new Emoji("🇧"));
+                    Thread.Sleep(500);
+                    await msg.AddReactionAsync(new Emoji("🇨"));
+                    Thread.Sleep(500);
+                    await msg.AddReactionAsync(new Emoji("🇩"));
+                    Thread.Sleep(500);
+                    await msg.AddReactionAsync(new Emoji("🇪"));
+                    Thread.Sleep(500);
+                    await msg.AddReactionAsync(new Emoji("🇫"));
+                    Thread.Sleep(500);
+                    await msg.AddReactionAsync(new Emoji("🇬"));
+                    Thread.Sleep(500);
+                    await msg.AddReactionAsync(new Emoji("🇭"));
+                    break;
+            }
+        }
+
+        [Command("Lmgtfy"), Alias("Googleit")]
+        public async Task WhyDoYouBotherMeLol([Remainder]string oh)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            oh = oh.Replace(' ', '+');
+            var embed = new EmbedBuilder()
+                .WithDescription($"http://lmgtfy.com/?q={oh}")
+                .WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3))
+                .WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("Ping")]
+        public async Task PingTheFuckingBot()
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder();
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithDescription(Bot.Utilities.GetFormattedLocaleMsg("PingCommandText", Context.Client.Latency));
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("Google")]
+        public async Task Google([Remainder]string search)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            search = search.Replace(' ', '+');
+            string searchUrl = $"https://google.com/search?q={search}";
+            var embed = new EmbedBuilder();
+            embed.WithDescription(searchUrl);
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+            embed.WithThumbnailUrl("https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Google_%22G%22_Logo.svg/2000px-Google_%22G%22_Logo.svg.png");
+
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("Invite")]
+        public async Task InviteUserToUseBot()
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var embed = new EmbedBuilder {
+                Description = "Invite the bot [here](https://bot.discord.io/SIVA)"
+            };
+            embed.WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+            embed.WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3));
+
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("Pluto")]
+        public async Task SendPartnerInfo()
+        {
+            var embed = new EmbedBuilder()
+                .WithDescription("**What is PlutoBot?**\nPlutoBot is a bot that is currently under development but already has moderation commands, channel logs, a cleverbot module, and some fun commands. It is developed by <@345318328195350528>.")
+                .AddField("Invite the bot", "https://discord.io/plutoBot")
+                .AddField("Pluto Support Server", "https://discord.gg/qTNEgPD")
+                .WithColor(new Color(0x195AC4))
+                .WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+
+            await ReplyAsync("", false, embed);
+        }
+
+        [Command("User")]
+        public async Task GetUserFromText([Remainder]string arg)
+        {
+            var config = GuildConfig.GetOrCreateConfig(Context.Guild.Id);
+            var user = Context.Guild.Users.FirstOrDefault(x => x.Username == arg);
+            if (user == null) {
+                var embedNull = new EmbedBuilder();
+                    embedNull.WithDescription("User doesn't exist in this server.")
+                    .WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3))
+                    .WithFooter(Bot.Utilities.GetFormattedLocaleMsg("CommandFooter", Context.User.Username));
+                await ReplyAsync("", false, embedNull);
+                return;
+            }
+            var embedNotNull = new EmbedBuilder()
+                .AddField("Username: ", $"{user.Username}#{user.Discriminator}")
+                .AddField("Game: ", user.Game.ToString() ?? "Nothing")
+                .AddField("Status: ", user.Status)
+                .AddField("Account Created: ", user.CreatedAt)
+                .AddField("User ID: ", user.Id)
+                .AddField("Is Bot", user.IsBot)
+                .WithColor(new Color(config.EmbedColour1, config.EmbedColour2, config.EmbedColour3))
+                .WithThumbnailUrl(user.GetAvatarUrl());
+            await ReplyAsync("", false, embedNotNull);
+        }
+    }
+}
diff --git a/SIVA/Resources/.gitignore b/SIVA/Resources/.gitignore
new file mode 100644
index 0000000..0be0961
--- /dev/null
+++ b/SIVA/Resources/.gitignore
@@ -0,0 +1,4 @@
+BotConfig.json
+GuildConfigs.json
+UAccounts.json
+*.dll
\ No newline at end of file
diff --git a/SIVA/Resources/Locale.json b/SIVA/Resources/Locale.json
new file mode 100644
index 0000000..0e2b753
--- /dev/null
+++ b/SIVA/Resources/Locale.json
@@ -0,0 +1,25 @@
+{
+  "AddRoleCommandText": "Role {0} has been given to user {1}!",
+  "AutoroleCommandText": "Role for this server set to `{0}`.",
+  "BanText": "User {0} has been banned by {1}!",
+  "BotLeftServer": "Leaving the server. :wave:",
+  "CommandFooter": "Command from {0}",
+  "FeedbackCommandText": "Your feedback has been sent! Message: ```{0}```",
+  "HelpString": "Use [this link](https://discordapp.com/oauth2/authorize?client_id=320942091049893888&scope=bot&permissions=8) to invite the bot into your server.  \n\nJoin our [Support Server](https://discord.gg/ubXaT6u)!  \n\nDeveloper: <@168548441939509248> \n\nFull command [documentation](https://github.com/greemdotcs/greemdotcs.github.io/wiki). \n\n**Commands do not work in DM with the bot.**",
+  "KickUserMsg": "User {0} has been kicked by {1}!",
+  "LevelCommandText": "{0}'s level is {1}!",
+  "LeveledUpMessage": "{0} leveled up to level {1}!",
+  "LoggingOutMsg": "Shutting down. Goodbye! :wave:",
+  "MoneyCommandText": "You have ${0}!",
+  "NotEnoughPermission": "Sorry {0}, you don't have permission for that command.",
+  "PickCommandText": "I chose {0}!",
+  "PingCommandText": "<:whO_PENG:385528428092456971> {0}ms",
+  "RemRoleCommandText": "Role {0} has been taken away user {1}!",
+  "SayCommandFooter": "Message from {0}",
+  "SupportEmbedText": "If you send a message in here, a support ticket will be created.\n\nDo not abuse tickets, as most servers will punish you for doing so.\nIf you create a false ticket with the means of meming, you're at the staff member's mercy...",
+  "VersionString": "V1.4.1",
+  "WarnCommandText": "{0} has been warned for: `{1}`",
+  "WarnsPluralText": "{0} has {1} warns.",
+  "WarnsSingulText": "{0} has {1} warn.",
+  "WelcomeColourText": "Successfully set this Guild's Welcome Message Colour to `{0}-{1}-{2}`."
+}
\ No newline at end of file
diff --git a/SIVA/Resources/TruthOrDare.json b/SIVA/Resources/TruthOrDare.json
new file mode 100644
index 0000000..e69de29
diff --git a/SIVA/SIVA.csproj b/SIVA/SIVA.csproj
new file mode 100644
index 0000000..153d296
--- /dev/null
+++ b/SIVA/SIVA.csproj
@@ -0,0 +1,48 @@
+﻿<Project Sdk="Microsoft.NET.Sdk" ToolsVersion="15.0">
+  <PropertyGroup Label="Globals">
+    <SccProjectName>SAK</SccProjectName>
+    <SccProvider>SAK</SccProvider>
+    <SccAuxPath>SAK</SccAuxPath>
+    <SccLocalPath>SAK</SccLocalPath>
+  </PropertyGroup>
+  <PropertyGroup>
+    <OutputType>Exe</OutputType>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+    <FileUpgradeFlags>
+    </FileUpgradeFlags>
+    <OldToolsVersion>2.0</OldToolsVersion>
+    <UpgradeBackupLocation />
+    <Platforms>AnyCPU;x64</Platforms>
+  </PropertyGroup>
+  <PropertyGroup>
+    <RootNamespace>SIVA</RootNamespace>
+    <ApplicationIcon>SIVA.ico</ApplicationIcon>
+    <StartupObject>SIVA.Core.Bot.Program</StartupObject>
+  </PropertyGroup>
+  <ItemGroup>
+    <PackageReference Include="Discord.Net" Version="1.0.2" />
+    <PackageReference Include="Discord.Net.Core" Version="1.0.2" />
+    <PackageReference Include="DiscordBotsList.Api" Version="1.1.0" />
+    <PackageReference Include="FortniteApi" Version="1.2.0" />
+    <PackageReference Include="Microsoft.CodeAnalysis.CSharp.Scripting" Version="2.7.0" />
+    <PackageReference Include="Microsoft.NETCore.App" Version="2.0.0" />
+    <PackageReference Include="Newtonsoft.Json" Version="11.0.2" />
+    <PackageReference Include="Overwatch.Net" Version="3.1.0" />
+    <PackageReference Include="Ultz.SimpleServer" Version="0.1.3" />
+  </ItemGroup>
+  <ItemGroup>
+    <Reference Include="System">
+      <HintPath>System</HintPath>
+    </Reference>
+  </ItemGroup>
+  <ItemGroup>
+    <None Update="Resources\Locale.json">
+      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
+    </None>
+  </ItemGroup>
+  <ProjectExtensions>
+    <VisualStudio>
+      <UserProperties />
+    </VisualStudio>
+  </ProjectExtensions>
+</Project>
\ No newline at end of file
diff --git a/SIVA/SIVA.ico b/SIVA/SIVA.ico
new file mode 100644
index 0000000..d5956a7
Binary files /dev/null and b/SIVA/SIVA.ico differ
